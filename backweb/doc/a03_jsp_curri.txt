# 내용계열화에 따른 jsp 학습 순서
1. jsp 기본 개념
	1) 개요 및 동작 원리 이해
		@@@.jsp ==> @@@.java(servlet프로그램) 
		==> @@@.class ==> 웹서버에서 웹클라이언트(브라우저에) html 코드를 전송..
		
		- 브라우저:http://주소:포트/페이지.jsp (브라우저 주소창)
		- 웹서버: @@@.jsp ==> @@@.java ==> @@@.class(명령에 의해) html을 
			코드 최종적으로 만들어 요청한 브라우저에 전달.
		- 브라우저:html코드를 받아서 해석(랜더링) 화면에 출력..
		
		# 주의) server단에 java로 처리되는 부분과 모든 내용을 html(css, javascript)
		만들어서 브라우저에서 전달하여 수행되는 내용을 구분하여 처리한다
	
	
	2) 기본 문법 및 구조 소개
	3) 내장 객체 및 기능 소개
2. jsp 기본 문법
	1) 스크립트 요소 : scriptlet, expression, declaration
	2) 디렉티브: 페이지 지시자, include지시지
	3) 액션 태그 : jsp:include, jsp:forward	
3. jsp와 서블릿
	1) 차이점
	2) jsp와 서블릿의 변환 과정
	3) jsp와 서블릿을 함께 사용하는 방법
4. jsp의 내장 객체 활용
	1) request, response, session, application등의 범위에 따른 내장 객체
	2) 내장 객체의 스코프와 라이프 사이클 이해.
	3) form객체를 통한 처리 예제
	
5. 웹 애플리케이셔 예외 처리
----------------------
6. 쿠키값 설정/session 설정
7. jsp:useBean 활용
8. el태그와 jsp 태그 라이브러리(jstl) 활용
9. mvc 아키텍처 패턴
10. 데이터베이스 연동 실무 예제

# jsp의 핵심
1. 페이지 호출 시,
	1) form데이터를 서버에 요청값으로 전달 방식 이해
	2) form데이터를 VO 객체에 할당하여 처리
2. session scope에 따른 처리
3. database 연동 화면 처리
4. front단과 효과적으로 연동하여 처리(html 코드, javascript 처리)
5. 에러가 발생할 때, 효과적으로 처리 능력..
	
	
# for each 구문 연습
1. 배열 단위 데이터, for문에 의해 배열의 구성요소 시작부터 마지막까지 하나의 메모리에 할당하여
	처리하는 것을 말한다.
	String []fruits = {"사과","바나나","딸기"};
	for(int idx=0;idx<fruits.length;idx++){
		String fruit = fruits[idx] 
	}
	for(단위 : 배열)
	for(String fruit:fruits){
		System.out.println(fruit); // 배열의 시작부터 마지막까지 fruit 할당되어 처리된다.
	}
2. class로 생성된 객체.
	class Person{
		private String name;
		private int age;
		..생성자
		..set/get메서드
	}
	Person[] persons = {new Person("홍길동",25), 
	                    new Person("김길동",27),
	                    new Person("마길동",29)}; // 정적배열을 크기를 줄이거나 늘일 수 없다. 
	// for(단위 데이터-구성데이터 :  배열 )                    
	for(Person person:persons){
		person.getName(), person.getAge()  // 단위 객체에 속성값을 호출할 수 있다.
	}     
	// ArrayList 동적배열(배열의 크기 변경이 가능하게 처리해주는 객체-구조체)  
    // ArrayList<유형>  : 해당 유형의 데이터 추가/수정/삭제 가능하게 동적 배열 만듬            
    ArrayList<Person> list = new ArrayList<Person>();
    list.add(new Person("홍길동",25));
    list.add(new Person("김길동",27));
    list.add(new Person("마길동",29));
    // for each 반복문에 지원
    for(Person person:list){
    	person.getName(), person.getAge() 
    }
 
 3. 위와 같은 구조의 데이터를 화면에서 처리할려면 처리 순서.
 	1) 출력할 내용을 화면에서 만들거나 설계를 하고..
 		no 이름 	국어 영어 수학
 		1  홍길동 70  80  90
 		2  김길동 70  80  90 ==> 하나의 단위 데이터 ==> 클래스로 선언하여 처리하는 것부터..
 	2) 단위 데이터를 가진 클래스를 선언..   
 		class Student{
 			private int no;
 			private String name;
 			private int kor;
 			private int eng;
 			private int math;
 			//생성자
 			//set/get메서드..
 		}
 	3) jsp에서
 		import="@@@.Student"	
 		import="java.util.List"	
 		import="java.util.ArrayList"
 		==> 위 List, ArrayList 포함 패키지 선언..	
 		import="java.util.*"	
 		ArrayList<Student> slist = new ArrayList<Student>();
 		slist.add(new Student(1,"홍길동",70,80,90));
 		slist.add(new Student(2,"김길동",80,80,90));
 		slist.add(new Student(3,"신길동",70,80,95));
 		<%
 		for(Student st:slist){
 		%>
		<tr>
			<td><%=st.getNo()%></td>
			<td><%=st.getName()%></td>
			<td><%=st.getKor()%></td>
			<td><%=st.getEng()%></td>
			<td><%=st.getMath()%></td>
		</tr>
 		<%
 		}
 		%>
 		
 		
 		







	