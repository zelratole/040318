### JSP 모듈 처리, EL 태그, Java List, Generic

#### 1. 흥미로운 도입

웹 애플리케이션을 개발할 때 효율적인 코드 작성과 유지 보수는 필수입니다. Java Server Pages (JSP)는 이러한 작업을 
단순화하는 중요한 도구입니다. 특히, EL(Expression Language) 태그를 활용하면 더 직관적이고 간결한 코드를 작성할 수 있습니다. 
또한, Java의 List와 Generic을 이해하고 활용하면 더 유연하고 재사용 가능한 코드를 작성할 수 있습니다. 
이 강의에서는 JSP 모듈 처리, EL 태그, Java List, 그리고 Generic에 대해 알아보겠습니다. 

#### 2. 학습목표

1. JSP 모듈 처리의 개념과 활용법을 이해한다.
2. EL 태그의 기능과 사용법을 익힌다.
3. Java의 List 인터페이스와 구현 클래스들을 학습한다.
4. Generic의 개념과 사용법을 이해하고 이를 코드에 적용한다.


#### 3. 주요 핵심 키워드와 핵심개념

- **JSP 모듈 처리**: JSP 페이지를 여러 모듈로 나누어 재사용성을 높이는 방법. 주로 `include` 지시어와 `jsp:include` 
  액션 태그를 사용.(재활용범위 :java변수, js, css, 화면구현)
  
  ```jsp
  <%@ include file="header.jsp" %>
  <jsp:include page="footer.jsp" />
  ```

- **EL 태그 (Expression Language)**: JSP에서 표현 언어를 사용하여 더 간결하고 직관적으로 데이터를 표현하는 방법. 
	예를 들어, `${user.name}`는 `user` 객체의 `name` 속성을 참조.
	<%%> script에서 발생하는 null, 요청값처리, get/set메서드 처리, 형변환 부분을 간편/자동 처리

  ```jsp
  <p>Welcome, ${user.name}!</p>
  ===> Person user = new Person()
  	   request.setAttribute("user",user);
  	   <%=user.getName()%>
  ```

- **Java List**: Java에서 리스트는 `List` 인터페이스를 통해 정의되며, `ArrayList`, `LinkedList` 등의 클래스로 구현.

  ```java
  List<String> names = new ArrayList<>();
  names.add("Alice");
  names.add("Bob");
  ```

- **Generic**: Java의 제네릭을 통해 데이터 타입을 지정하여 더 안전하고 재사용 가능한 코드를 작성할 수 있음. 예를 들어, `List<String>`은 문자열만 담을 수 있는 리스트를 의미.

  ```java
  public class Box<T> {
      private T item;
      public void set(T item) { this.item = item; }
      public T get() { return item; }
  }
  ```

---

#### 4. 퀴즈문제/토론과제

- **퀴즈문제**
  1. EL 태그를 사용하여 `user` 객체의 `email` 속성을 출력하려면 어떻게 해야 하나요?
     - 정답: `${user.email}`
  2. JSP에서 다른 JSP 페이지를 포함시키는 방법은 무엇인가요?
     - 정답: `include` 지시어와 `jsp:include` 액션 태그를 사용.
  3. Generic의 장점은 무엇인가요?
     - 정답: 데이터 타입의 안정성을 보장하고 코드의 재사용성을 높인다.

- **토론과제**
  1. JSP 모듈 처리의 장점과 단점에 대해 토론해보세요.
  2. EL 태그를 사용하는 것과 JSTL을 사용하는 것의 차이점은 무엇인가요?
  3. Java의 List 인터페이스와 배열의 차이점에 대해 설명해보세요.
  4. 제네릭을 사용하지 않고 코드를 작성할 때 발생할 수 있는 문제점은 무엇인가요?

---

#### 5. 실무적용사례

- **JSP 모듈 처리**: 대규모 웹 애플리케이션에서 헤더, 푸터, 네비게이션 바 등을 별도의 JSP 파일로 분리하여 관리함으로써 코드의 재사용성과 유지 보수성을 높임.

  ```jsp
  <%@ include file="header.jsp" %>
  <div class="content">
      <!-- main content here -->
  </div>
  <%@ include file="footer.jsp" %>
  ```

- **EL 태그**: 사용자 친화적인 대시보드에서 사용자 정보를 표시할 때 EL 태그를 사용하여 쉽게 접근하고 표시함.

  ```jsp
  <h1>Hello, ${user.firstName} ${user.lastName}!</h1>
  <p>Your email is: ${user.email}</p>
  ```

- **Java List**: 고객 관리 시스템에서 고객의 주문 내역을 리스트로 관리하여 쉽게 조회하고 수정할 수 있게 함.

  ```java
  List<Order> orders = new ArrayList<>();
  orders.add(new Order("2023-01-01", 100.0));
  orders.add(new Order("2023-01-02", 150.0));
  ```

- **Generic**: 여러 타입의 데이터를 처리하는 박스 클래스를 만들어 다양한 타입의 데이터를 안전하게 저장하고 불러옴.

  ```java
  Box<String> stringBox = new Box<>();
  stringBox.set("Hello");
  System.out.println(stringBox.get());

  Box<Integer> intBox = new Box<>();
  intBox.set(123);
  System.out.println(intBox.get());
  ```
