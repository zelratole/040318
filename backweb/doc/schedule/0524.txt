### 자바 DAO (Data Access Object)

#### 1. 흥미로운 도입
DAO(Data Access Object) 패턴은 데이터베이스와의 상호 작용을 추상화하여 데이터베이스와 독립적인 
프로그래밍을 가능하게 합니다. 자바 개발에서 DAO 패턴을 사용하면 데이터베이스와의 연결, 쿼리, 데이터 조작 
등의 작업을 캡슐화할 수 있습니다. 이를 통해 코드를 더욱 모듈화하고 유지보수성을 높일 수 있습니다. 
예를 들어, 인터넷 서점 애플리케이션에서 책의 정보를 데이터베이스에 저장하고 가져오는 작업을 생각해 봅시다.
 DAO 패턴을 사용하면 데이터베이스 변경에 따른 코드를 최소화할 수 있어 매우 유용합니다.

#### 2. 학습목표
- DAO 패턴의 개념과 필요성을 이해한다.
- 자바에서 DAO를 구현하는 방법을 익힌다.
- JDBC를 사용한 데이터베이스 연결 및 데이터 조작을 실습한다.
- DAO 패턴을 사용하여 코드의 모듈화와 유지보수성을 높이는 방법을 학습한다.
- DAO 패턴을 실제 프로젝트에 적용해 본다.

#### 3. 주요 핵심 키워드와 핵심개념
- **DAO 패턴**: 데이터 접근 로직을 캡슐화하여 데이터 소스와 애플리케이션 로직을 분리하는 디자인 패턴.
		jsp(연결, 데이터 출력)
		jsp ==> dao 데이터를 전송 ==> jsp
		모듈화하여 처리하는 방식을 사용한다.
- **JDBC**: Java Database Connectivity, 자바에서 데이터베이스에 연결하고 쿼리를 실행하는 API.
- **Connection**: 데이터베이스와의 연결을 나타내는 객체.
- **PreparedStatement**: SQL 문을 미리 컴파일하여 성능을 최적화하고 SQL 인젝션을 방지하는 객체.
		Statement 대화 ==> PreparedStatement
		웹상에 보안적 이슈가 있는 sql injection에 대한 대안으로 만들어진 객체..
- **ResultSet**: SQL 쿼리의 결과를 나타내는 객체.

#### 4. 퀴즈문제/토론과제
**퀴즈문제:**
1. DAO 패턴의 주요 장점은 무엇인가?
2. JDBC를 사용하여 데이터베이스에 연결하는 기본 단계를 나열하시오.
3. PreparedStatement와 Statement의 차이점은 무엇인가?
4. DAO 클래스에서 CRUD 작업을 수행하는 메서드의 예를 작성하시오.

**토론과제:**
1. DAO 패턴을 사용함으로써 얻을 수 있는 가장 큰 이점은 무엇이라고 생각하나요? 예제를 통해 설명해 보세요.
2. DAO 패턴을 사용하지 않고 데이터베이스에 접근하는 방법과 비교하여 어떤 차이점이 있을까요?
3. 다양한 데이터베이스(DB2, MySQL, Oracle 등)에 대한 DAO를 작성할 때 공통된 인터페이스를 설계하는 방법에 대해 토론해 보세요.

#### 5. 실무적용사례
**사례 1: 인터넷 서점 애플리케이션**
인터넷 서점 애플리케이션에서 책 정보를 데이터베이스에 저장하고 검색하는 기능을 구현할 때,
 DAO 패턴을 사용하여 데이터 접근 코드를 모듈화할 수 있습니다. 예를 들어, 
 `BookDAO` 클래스를 만들어 책 정보를 저장하고 검색하는 메서드를 정의합니다.

# 주의
1. 공통적이고, 고정된 코드는 일단, 복사해서 사용하는 것을 추천드립니다.
	1) typing 에러가 날 때는 반드시 원인/해결은 파악할 수 있을 정도까지..
2. 기능에 따라서 즉 sql문에 따라서 변경되는 코드 반드시 이해하고, 진행..



```java
public class BookDAO {
    private Connection connection;

    public BookDAO() {
        // 데이터베이스 연결 설정
        try {
            Class.forName("oracle.jdbc.driver.OracleDriver");
            this.connection = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe", "username", "password");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void addBook(Book book) {
        String sql = "INSERT INTO books (title, author, price) VALUES (?, ?, ?)";
        try (PreparedStatement statement = connection.prepareStatement(sql)) {
            statement.setString(1, book.getTitle());
            statement.setString(2, book.getAuthor());
            statement.setDouble(3, book.getPrice());
            statement.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public List<Book> getAllBooks() {
        List<Book> books = new ArrayList<>();
        String sql = "SELECT * FROM books";
        try (Statement statement = connection.createStatement();
             ResultSet resultSet = statement.executeQuery(sql)) {
            while (resultSet.next()) {
                Book book = new Book();
                book.setId(resultSet.getInt("id"));
                book.setTitle(resultSet.getString("title"));
                book.setAuthor(resultSet.getString("author"));
                book.setPrice(resultSet.getDouble("price"));
                books.add(book);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return books;
    }
}
```

**사례 2: 기업 인사 관리 시스템**
기업의 인사 관리 시스템에서 직원 정보를 데이터베이스에 저장하고 조회하는 작업을 DAO 패턴을 사용하여 
구현할 수 있습니다. `EmployeeDAO` 클래스를 통해 직원 정보에 대한 CRUD 작업을 수행합니다. 
이 패턴을 사용하면 데이터베이스와 독립적으로 직원 정보를 관리할 수 있어 코드의 유지보수성이 높아집니다. 
이와 같은 DAO 패턴의 적용 사례를 통해 복잡한 데이터베이스 연동 작업을 더 쉽게 관리하고 유지보수할 수 있습니다.

# 진도계획
0. 일단 DB 연동 화면단 출력
   dao/화면에 검색/등록/수정/삭제..
1. front단 리뷰 및 javascript/jquery 핵심 진도
2. java단
	1) 상속/추상클래스/예외처리/collection
	2) database
3. database(sql)
4. spring	












