### DAO 연동 JSP 조회
#### 1. 흥미로운 도입
JSP(JavaServer Pages)는 동적인 웹 페이지를 만들기 위한 서버 사이드 기술입니다. 
JSP와 DAO(Data Access Object)를 연동하여 데이터베이스에서 데이터를 조회하고 이를 웹 페이지에 
표시하는 것은 웹 애플리케이션 개발의 핵심입니다. 이번 학습에서는 이를 실제로 구현해 보면서 실무에서 
자주 사용되는 기술들을 이해해보겠습니다. 

#### 2. 학습목표
- JSP와 DAO를 연동하여 데이터베이스에서 데이터를 조회하는 방법을 이해한다.
- 데이터베이스 연결을 설정하고, SQL 쿼리를 실행하여 결과를 JSP 페이지에 표시하는 방법을 익힌다.
- 실무에서 사용할 수 있는 JSP와 DAO 설계 패턴을 학습한다.

#### 3. 주요 핵심 키워드와 핵심 개념
- **JSP(JavaServer Pages):** 서버 사이드 스크립팅 기술로, 동적인 웹 페이지를 생성할 수 있다.
- **DAO(Data Access Object):** 데이터베이스와의 상호작용을 캡슐화한 객체로, 데이터베이스 접근을 
    추상화하여 코드의 유지보수성을 높인다.
- **JDBC(Java Database Connectivity):** 자바에서 데이터베이스에 접근하기 위한 API로, 
    SQL 쿼리를 실행하고 결과를 처리할 수 있다.
- **MVC(Model-View-Controller) 패턴:** 웹 애플리케이션을 구조화하는 디자인 패턴으로, 
    비즈니스 로직과 프레젠테이션 로직을 분리하여 코드의 재사용성과 확장성을 높인다.

#### 4. 퀴즈문제/토론과제
**퀴즈문제:**
1. JSP에서 DAO를 사용하는 주요 이유는 무엇인가요?
2. JDBC를 사용하여 데이터베이스에 연결할 때 필요한 기본적인 단계들을 설명해보세요.
3. MVC 패턴에서 각 구성 요소(Model, View, Controller)의 역할을 간단히 설명하세요.

**토론과제:**
- DAO 패턴을 사용함으로써 얻을 수 있는 장점과 단점에 대해 토론해보세요. 특히, 팀 프로젝트에서의 
   코드 관리 측면에서 어떤 이점이 있는지 논의해보세요.
- 실무에서 데이터베이스 연결과 관련된 보안 이슈를 어떻게 처리하는지에 대해 토론해보세요. 
   예를 들어, SQL 인젝션 방지 방법 등을 포함해서 논의해보세요.

#### 5. 실무적용사례
**사례 1: 온라인 쇼핑몰 제품 조회**
온라인 쇼핑몰에서 고객이 상품 목록을 조회할 수 있도록 JSP와 DAO를 연동하는 사례입니다. DAO를 사용하여 데이터베이스에서 상품 정보를 조회하고, JSP 페이지에 이를 표시합니다. 이를 통해 고객은 웹 페이지에서 다양한 상품을 검색하고 볼 수 있습니다.

**사례 2: 사내 인트라넷 직원 정보 조회**
회사 인트라넷 시스템에서 직원들이 자신의 정보나 다른 직원의 정보를 조회할 수 있도록 하는 경우입니다. DAO를 통해 직원 데이터를 데이터베이스에서 가져오고, JSP를 통해 이를 사용자에게 보여줍니다. 이를 통해 직원들은 손쉽게 필요한 정보를 검색하고 열람할 수 있습니다.

**실습 예제:**
1. **데이터베이스 설정:** oracle 데이터베이스에 'products' 테이블을 생성하고 샘플 데이터를 삽입합니다.
    ```sql
    CREATE TABLE products (
        id NUMBER PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        price NUMBER(10, 2) NOT NULL,
        description VARCHAR2(500)
    );

    INSERT INTO products (name, price, description) VALUES
    ('Product A', 19.99, 'Description for Product A'),
    ('Product B', 29.99, 'Description for Product B'),
    ('Product C', 39.99, 'Description for Product C');
    ```
2. **DAO 클래스 작성:**
    ```java
    public class ProductDAO {
        private static final String JDBC_URL = "jdbc:mysql://localhost:3306/mydatabase";
        private static final String JDBC_USER = "username";
        private static final String JDBC_PASSWORD = "password";

        public List<Product> getAllProducts() {
            List<Product> products = new ArrayList<>();
            try (Connection connection = DriverManager.getConnection(JDBC_URL, JDBC_USER, JDBC_PASSWORD);
                 Statement statement = connection.createStatement();
                 ResultSet resultSet = statement.executeQuery("SELECT * FROM products")) {

                while (resultSet.next()) {
                    Product product = new Product();
                    product.setId(resultSet.getInt("id"));
                    product.setName(resultSet.getString("name"));
                    product.setPrice(resultSet.getBigDecimal("price"));
                    product.setDescription(resultSet.getString("description"));
                    products.add(product);
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            return products;
        }
    }
    ```
3. **JSP 페이지 작성:**
    ```jsp
    <%@ page import="java.util.List" %>
    <%@ page import="com.example.ProductDAO" %>
    <%@ page import="com.example.Product" %>
    <html>
    <head>
        <title>Product List</title>
    </head>
    <body>
        <h1>Product List</h1>
        <%
            ProductDAO productDAO = new ProductDAO();
            List<Product> productList = productDAO.getAllProducts();
        %>
        <table border="1">
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Price</th>
                <th>Description</th>
            </tr>
            <%
                for (Product product : productList) {
            %>
            <tr>
                <td><%= product.getId() %></td>
                <td><%= product.getName() %></td>
                <td><%= product.getPrice() %></td>
                <td><%= product.getDescription() %></td>
            </tr>
            <%
                }
            %>
        </table>
    </body>
    </html>
    ```

