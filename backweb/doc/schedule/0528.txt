## DAO와 JSP 연동 처리(조회, 등록, 수정, 삭제)

### 1. 흥미로운 도입
DAO(Data Access Object) 패턴은 데이터베이스와의 상호작용을 단순화하고, 데이터베이스 관련 코드를 
깔끔하게 관리하는 데 도움을 줍니다. JSP(JavaServer Pages)는 동적인 웹 페이지를 만들기 위해 사용되며,
 서버에서 처리된 데이터를 웹 페이지에 전달하는 역할을 합니다. 이 둘을 연동하여 CRUD(Create,
  Read, Update, Delete) 기능을 구현하면 효율적이고 유지보수하기 쉬운 웹 애플리케이션을 만들 수 있습니다.

### 2. 학습목표
- DAO 패턴의 이해와 사용법 익히기
- JSP와 DAO 연동을 통한 CRUD 기능 구현
- 요청값을 객체로 처리하는 방법 익히기
- `useBean` 태그를 이용하여 JSP에서 객체를 활용하는 방법 익히기

### 3. 주요 핵심 키워드와 핵심개념
- **DAO (Data Access Object)**: 데이터베이스와의 상호작용을 캡슐화하는 객체.
- **JSP (JavaServer Pages)**: 동적 웹 콘텐츠를 생성하기 위한 서버 사이드 스크립팅 언어.
- **CRUD (Create, Read, Update, Delete)**: 기본적인 데이터 처리 기능.
- **useBean**: JSP에서 JavaBean을 사용하기 위한 태그.
- **DTO (Data Transfer Object)**: 데이터 전송을 위한 객체.
- **MVC (Model-View-Controller)**: 애플리케이션 구조를 설계하기 위한 패턴.

### 4. 퀴즈문제/토론과제
#### 퀴즈
1. DAO 패턴의 주요 장점은 무엇인가요?
2. JSP에서 `useBean` 태그의 역할은 무엇인가요?
3. CRUD 기능 중 데이터베이스에서 데이터를 읽어오는 기능을 무엇이라고 하나요?
4. DAO와 DTO의 차이점은 무엇인가요?

#### 토론과제
- DAO 패턴을 사용하지 않고 직접 데이터베이스 코드와 JSP를 연결했을 때의 문제점에 대해 토론해보세요.
- MVC 패턴에서 DAO는 어떤 역할을 하며, 이를 통해 얻을 수 있는 이점에 대해 토론해보세요.

### 5. 실무적용사례
#### 사례 1: 회원 관리 시스템
회원 관리 시스템을 구축할 때, 회원 정보를 데이터베이스에 저장하고 이를 조회, 수정, 삭제하는 기능이 필요합니다. 이를 위해 DAO 패턴을 사용하여 데이터베이스 접근 로직을 캡슐화하고, JSP를 통해 사용자 인터페이스를 구현합니다.

```java
// MemberDAO.java (DAO 클래스)
public class MemberDAO {
    // 데이터베이스 연결 및 CRUD 메서드 구현
    public Member getMemberById(int id) {
        // 데이터베이스 조회 로직
    }

    public void addMember(Member member) {
        // 데이터베이스 삽입 로직
    }

    public void updateMember(Member member) {
        // 데이터베이스 업데이트 로직
    }

    public void deleteMember(int id) {
        // 데이터베이스 삭제 로직
    }
}

// Member.java (DTO 클래스)
public class Member {
    private int id;
    private String name;
    private String email;
    // getter와 setter 메서드
}

// addMember.jsp (JSP 페이지)
<jsp:useBean id="member" class="com.example.Member" scope="request"/>
<form action="addMember.do" method="post">
    Name: <input type="text" name="name"/>
    Email: <input type="text" name="email"/>
    <input type="submit" value="Add Member"/>
</form>

// AddMemberServlet.java (서블릿)
@WebServlet("/addMember.do")
public class AddMemberServlet extends HttpServlet {
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String name = request.getParameter("name");
        String email = request.getParameter("email");

        Member member = new Member();
        member.setName(name);
        member.setEmail(email);

        MemberDAO memberDAO = new MemberDAO();
        memberDAO.addMember(member);

        response.sendRedirect("memberList.jsp");
    }
}
```

#### 사례 2: 제품 관리 시스템
제품 관리 시스템에서는 제품 정보를 데이터베이스에 저장하고, 이를 조회, 수정, 삭제하는 기능이 필요합니다. DAO 패턴을 사용하여 이러한 데이터베이스 작업을 처리하고, JSP와 서블릿을 통해 사용자에게 인터페이스를 제공합니다.

```java
// ProductDAO.java (DAO 클래스)
public class ProductDAO {
    public Product getProductById(int id) {
        // 데이터베이스 조회 로직
    }

    public void addProduct(Product product) {
        // 데이터베이스 삽입 로직
    }

    public void updateProduct(Product product) {
        // 데이터베이스 업데이트 로직
    }

    public void deleteProduct(int id) {
        // 데이터베이스 삭제 로직
    }
}

// Product.java (DTO 클래스)
public class Product {
    private int id;
    private String name;
    private double price;
    // getter와 setter 메서드
}

// addProduct.jsp (JSP 페이지)
<jsp:useBean id="product" class="com.example.Product" scope="request"/>
<form action="addProduct.do" method="post">
    Name: <input type="text" name="name"/>
    Price: <input type="text" name="price"/>
    <input type="submit" value="Add Product"/>
</form>

// AddProductServlet.java (서블릿)
@WebServlet("/addProduct.do")
public class AddProductServlet extends HttpServlet {
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String name = request.getParameter("name");
        double price = Double.parseDouble(request.getParameter("price"));

        Product product = new Product();
        product.setName(name);
        product.setPrice(price);

        ProductDAO productDAO = new ProductDAO();
        productDAO.addProduct(product);

        response.sendRedirect("productList.jsp");
    }
}
```
