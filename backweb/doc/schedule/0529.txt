# DAO와 JSP 연동 처리 및 Oracle SQL 연습

## 1. 흥미로운 도입

웹 애플리케이션을 개발하는 과정에서 데이터베이스와의 연동은 필수적인 요소입니다. 데이터의 조회, 등록, 
수정, 삭제는 웹 애플리케이션이 사용자와 상호작용하는 중요한 방식입니다. 이번 학습에서는 
DAO (Data Access Object) 패턴을 활용하여 JSP (JavaServer Pages)와 Oracle 데이터베이스를 
연동하는 방법을 알아보고, 이를 통해 CRUD (Create, Read, Update, Delete) 작업을 어떻게 
구현할 수 있는지 배워보겠습니다.

## 2. 학습목표

1. DAO 패턴의 이해 및 JSP와의 연동 방법 습득
2. Oracle 데이터베이스에서 CRUD 작업 구현
3. 실무에서 사용되는 Oracle SQL 함수 활용 방법 학습
4. 데이터베이스 연동 웹 애플리케이션 개발 능력 배양

## 3. 주요 핵심 키워드와 핵심개념

- **DAO (Data Access Object):** 데이터베이스와 상호작용하는 객체로, SQL 쿼리를 사용하여 데이터를
     처리합니다.
- **JSP (JavaServer Pages):** 자바를 기반으로 동적인 웹 페이지를 생성하는 기술입니다.
- **Oracle SQL:** Oracle 데이터베이스에서 사용되는 SQL 언어로, 데이터를 관리하고 조작하는 데 사용됩니다.
- **CRUD:** 데이터베이스에서의 기본적인 작업인 Create, Read, Update, Delete를 의미합니다.
- **PreparedStatement:** SQL 쿼리 실행 시 SQL 인젝션 공격을 방지하기 위해 사용되는 Java 객체입니다.

## 4. 퀴즈문제/토론과제

### 퀴즈문제

1. DAO 패턴을 사용하는 주요 이유는 무엇인가요?
2. PreparedStatement를 사용하면 어떤 이점이 있나요?
3. CRUD 작업 중 'Update'와 'Delete'의 차이점을 설명하세요.
4. Oracle SQL에서 `NVL` 함수는 어떤 역할을 하나요?

### 토론과제

1. DAO 패턴을 적용함으로써 얻을 수 있는 장점과 단점을 논의해보세요.
2. JSP와 Oracle 데이터베이스 연동 시 발생할 수 있는 보안 문제와 그 해결책에 대해 토론해보세요.

## 5. 실무적용사례

### 예시 시나리오: 도서 관리 시스템

**도서 조회 예시:**

```java
// BookDAO.java
public List<Book> getAllBooks() throws SQLException {
    List<Book> books = new ArrayList<>();
    String sql = "SELECT * FROM books";
    try (Connection conn = getConnection();
         PreparedStatement pstmt = conn.prepareStatement(sql);
         ResultSet rs = pstmt.executeQuery()) {
        while (rs.next()) {
            Book book = new Book();
            book.setId(rs.getInt("id"));
            book.setTitle(rs.getString("title"));
            book.setAuthor(rs.getString("author"));
            books.add(book);
        }
    }
    return books;
}
```

**JSP 페이지에서 도서 목록 출력:**

```jsp
<%@ page import="java.util.*, java.sql.*, your.package.BookDAO, your.package.Book" %>
<%
    BookDAO bookDAO = new BookDAO();
    List<Book> books = bookDAO.getAllBooks();
%>
<html>
<head><title>Book List</title></head>
<body>
<h2>Book List</h2>
<table border="1">
    <tr><th>ID</th><th>Title</th><th>Author</th></tr>
    <%
        for (Book book : books) {
            out.println("<tr><td>" + book.getId() + "</td><td>" + book.getTitle() + "</td><td>" + book.getAuthor() + "</td></tr>");
        }
    %>
</table>
</body>
</html>
```

**Oracle 함수 SQL 연습 예시:**

```sql
-- 도서 테이블에서 null인 출판일을 현재 날짜로 대체하는 예시
SELECT id, title, NVL(published_date, SYSDATE) AS published_date
FROM books;
```

이와 같이 DAO와 JSP를 사용한 데이터베이스 연동 처리를 통해 효율적인 웹 애플리케이션을 개발할 수 있습니다. Oracle SQL의 다양한 함수를 활용하여 데이터 조작을 최적화할 수 있으며, 실무에서도 이와 같은 기법들을 적용하여 안정적이고 유지보수 가능한 시스템을 구축할 수 있습니다.

