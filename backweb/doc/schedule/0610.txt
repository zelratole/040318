### 자바 상속

#### 1. 흥미로운 도입

자바 프로그래밍을 배울 때 "상속"이라는 개념을 처음 접하면 마치 유전자 정보를 물려받는 것처럼 객체들이 서로 
정보를 공유하는 모습을 상상할 수 있습니다. 실제로 상속은 객체 지향 프로그래밍에서 중요한 역할을 하며, 
이를 통해 코드 재사용성과 유지보수성을 높일 수 있습니다. 마치 부모 클래스로부터 자식 클래스가 속성과 
메서드를 물려받아 새로운 특성을 추가하거나 수정할 수 있는 것처럼, 자바의 상속 개념을 통해 더 효율적이고 
유연한 코드를 작성할 수 있습니다.

#### 2. 학습목표

- 자바의 상속 개념과 그 필요성을 이해한다.
- 상속을 사용하여 클래스 간의 관계를 설정하고 활용할 수 있다.
- 상속을 통해 코드의 재사용성을 높이는 방법을 배운다.
- 추상 클래스와 인터페이스를 상속과 비교하여 이해한다.

#### 3. 주요 핵심 키워드와 핵심개념

- **상속 (Inheritance)**: 부모 클래스의 속성과 메서드를 자식 클래스가 물려받는 것.
- **부모 클래스 (Superclass)**: 속성과 메서드를 자식 클래스에 제공하는 클래스.
- **자식 클래스 (Subclass)**: 부모 클래스를 상속받아 그 속성과 메서드를 사용할 수 있는 클래스.
- **오버라이딩 (Overriding)**: 자식 클래스가 부모 클래스의 메서드를 재정의하는 것.
- **super 키워드**: 자식 클래스에서 부모 클래스의 메서드나 생성자를 호출할 때 사용하는 키워드.
- **추상 클래스 (Abstract Class)**: 인스턴스를 생성할 수 없는 클래스. 하나 이상의 추상 메서드를 포함할 수 있음.
- **인터페이스 (Interface)**: 구현되지 않은 메서드의 집합을 정의하는 타입. 클래스가 이를 구현하여 메서드를 정의함.

#### 4. 퀴즈문제/토론과제

**퀴즈문제**
1. 다음 중 자바에서 상속을 나타내는 키워드는 무엇인가요?
   - a) extends
   - b) implements
   - c) inherit
   - d) super

2. 부모 클래스의 메서드를 자식 클래스에서 재정의하는 것을 무엇이라고 하나요?
   - a) Overloading
   - b) Overriding
   - c) Inheriting
   - d) Implementing

3. 추상 클래스와 인터페이스의 차이점에 대해 설명하시오.

**토론과제**
- 상속을 사용하면 코드 재사용성이 높아지지만, 잘못된 사용은 코드의 복잡성을 증가시킬 수 있습니다. 
   상속을 사용할 때의 장단점에 대해 토론해보세요.
- "상속 대신 조합을 사용하라"는 객체 지향 설계 원칙에 대해 논의해보고, 상속과 조합의 장단점을 비교해보세요.

#### 5. 실무적용사례

**사례 1: 은행 시스템**
은행 시스템에서 여러 종류의 계좌(저축계좌, 당좌계좌 등)를 구현할 때, `Account`라는 부모 클래스를 만들고, 
각 계좌 타입별로 `SavingsAccount`, `CheckingAccount` 등의 자식 클래스를 만들어 상속을 활용할 수 있습니다. 이를 통해 공통적인 계좌 기능(예: 입출금 기능)을 부모 클래스에 구현하고, 각 계좌 타입별로 특화된 기능을 자식 클래스에서 추가하거나 수정할 수 있습니다.

**사례 2: 그래픽 사용자 인터페이스 (GUI) 라이브러리**
GUI 라이브러리에서는 다양한 UI 컴포넌트(Button, TextBox, Label 등)를 상속 구조로 설계할 수 있습니다. `Component`라는 부모 클래스를 만들고, 각 UI 요소들은 이 클래스를 상속받아 공통된 속성과 메서드를 활용하면서 자신만의 특화된 기능을 추가합니다. 이를 통해 코드의 중복을 줄이고, 유지보수성을 높일 수 있습니다.

**사례 3: 게임 개발**
게임 개발에서 다양한 캐릭터 클래스(전사, 마법사, 궁수 등)를 만들 때, `Character`라는 부모 클래스를 정의하고,
 각 캐릭터 클래스가 이를 상속받아 공통된 속성(예: 체력, 공격력)과 메서드(예: 공격, 방어)를 활용하면서 
 자신만의 특화된 행동을 추가할 수 있습니다. 이렇게 하면 새로운 캐릭터 클래스를 추가할 때마다 중복된 코드를 줄이고,
 일관성 있는 코드 구조를 유지할 수 있습니다.


