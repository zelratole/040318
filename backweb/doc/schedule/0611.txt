# 자바 예외처리 및 API에 대한 학습자료

## 1. 흥미로운 도입
자바 프로그램을 작성하면서 가장 중요한 것 중 하나는 안정적이고 오류 없이 코드를 실행하는 것입니다. 
하지만 예상치 못한 오류는 언제든 발생할 수 있으며, 이를 제대로 처리하지 않으면 프로그램이 중단되거나 
예기치 않은 결과를 초래할 수 있습니다. 자바의 예외처리(Exception Handling)는 이러한 문제를 해결하는 
강력한 도구입니다. 또한, 자바 API(Application Programming Interface)는 개발자들이 복잡한 작업을 
보다 쉽게 수행할 수 있도록 도와줍니다. 이번 학습에서는 자바의 예외처리와 API에 대해 자세히 알아보겠습니다.

## 2. 학습목표
- 자바의 예외처리 메커니즘을 이해하고 사용할 수 있다.
- 다양한 예외 유형과 그 처리 방법을 학습한다.
- 자바 API의 개념과 활용 방법을 익힌다.
- 예외처리와 API를 활용하여 안정적이고 효율적인 코드를 작성할 수 있다.

## 3. 주요 핵심 키워드와 핵심개념
### 핵심 키워드
- 예외(Exception)
- 예외처리(Exception Handling)
- try-catch 블록
- throw 및 throws
- 자바 API
- 표준 예외(Standard Exception)
- 사용자 정의 예외(Custom Exception)

### 핵심개념
#### 예외와 예외처리
- **예외(Exception)**: 프로그램 실행 중 발생하는 예기치 못한 오류.
- **예외처리(Exception Handling)**: 예외가 발생했을 때 프로그램이 중단되지 않고 계속 실행되도록 
	하는 방법.

#### try-catch 블록
- **try**: 예외가 발생할 수 있는 코드를 포함.
- **catch**: 예외가 발생했을 때 실행할 코드를 포함.
- **finally**: 예외 발생 여부와 상관없이 항상 실행되는 코드를 포함.

#### throw 및 throws
- **throw**: 예외를 직접 발생시키는 키워드.
- **throws**: 메서드 시그니처에 사용되어 해당 메서드에서 발생할 수 있는 예외를 명시.

#### 자바 API
- **API**: 특정 기능을 수행하기 위한 미리 정의된 클래스 및 메서드의 집합.
- **자바 API**: 자바 플랫폼에서 제공하는 다양한 표준 라이브러리.

## 4. 퀴즈문제/토론과제
### 퀴즈문제
1. 예외와 오류(Error)의 차이는 무엇인가요?
2. try-catch 블록에서 finally 블록은 언제 실행되나요?
3. throw와 throws의 차이점을 설명하세요.
4. NullPointerException은 언제 발생하나요?

### 토론과제
1. 예외처리를 통해 얻을 수 있는 이점과 과도한 예외처리가 가져올 수 있는 문제점에 대해 토론해보세요.
2. 자바 API를 활용하여 특정 작업(예: 파일 읽기, 네트워크 연결)을 수행하는 예제 코드를 작성하고 공유해보세요.

## 5. 실무적용사례
### 사례 1: 은행 거래 시스템
은행 거래 시스템에서는 여러 종류의 예외가 발생할 수 있습니다. 예를 들어, 계좌 잔액이 부족한 경우, 네트워크 오류가 발생한 경우 등이 있습니다. 이때 예외처리를 통해 이러한 문제를 적절히 처리하면 시스템이 중단되지 않고 고객에게 유연하게 대응할 수 있습니다.

```java
public void transferFunds(Account fromAccount, Account toAccount, double amount) {
    try {
        if (fromAccount.getBalance() < amount) {
            throw new InsufficientFundsException("잔액이 부족합니다.");
        }
        fromAccount.withdraw(amount);
        toAccount.deposit(amount);
    } catch (InsufficientFundsException e) {
        System.err.println(e.getMessage());
    } catch (Exception e) {
        System.err.println("거래 처리 중 오류가 발생했습니다: " + e.getMessage());
    } finally {
        System.out.println("거래가 종료되었습니다.");
    }
}
```

### 사례 2: 파일 처리 응용 프로그램
파일 처리 응용 프로그램에서 파일을 읽고 쓰는 작업 중 예외가 발생할 수 있습니다. 예외처리를 통해 파일이 없거나 읽기/쓰기 권한이 없을 때 발생하는 문제를 처리하여 프로그램이 안정적으로 작동하도록 합니다.

```java
public void readFile(String fileName) {
    BufferedReader reader = null;
    try {
        reader = new BufferedReader(new FileReader(fileName));
        String line;
        while ((line = reader.readLine()) != null) {
            System.out.println(line);
        }
    } catch (FileNotFoundException e) {
        System.err.println("파일을 찾을 수 없습니다: " + fileName);
    } catch (IOException e) {
        System.err.println("파일 읽기 중 오류가 발생했습니다: " + e.getMessage());
    } finally {
        try {
            if (reader != null) {
                reader.close();
            }
        } catch (IOException e) {
            System.err.println("파일 닫기 중 오류가 발생했습니다: " + e.getMessage());
        }
    }
}
```

