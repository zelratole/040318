# 스프링 MVC 기초

## 학습: 요청값과 폼 형식 차이 이해
### 5. [컨트롤러/뷰] URL과 요청처리: 단일 데이터 (폼 활용)
- **기본 예제**
    - **컨트롤러**:
    ```java
    @Controller
    public class FormController {
        @GetMapping("/singleForm")
        public String showForm() {
            return "singleForm";
        }

        @PostMapping("/processSingleForm")
        public String processForm(@RequestParam("name") String name, Model model) {
            model.addAttribute("name", name);
            return "formResult";
        }
    }
    ```
    - **뷰 (singleForm.jsp)**:
    ```html
    <form action="processSingleForm" method="post">
        Name: <input type="text" name="name" />
        <input type="submit" value="Submit" />
    </form>
    ```
    - **뷰 (formResult.jsp)**:
    ```html
    <p>Submitted name: ${name}</p>
    ```

- **연습용 URL 및 요청값**
    1. URL: `/singleForm1`, 요청값: `name=John`
    2. URL: `/singleForm2`, 요청값: `age=25`
    3. URL: `/singleForm3`, 요청값: `loc=서울`

### 6. [컨트롤러/뷰] URL과 요청처리: 다중 데이터 (폼 활용)
- **기본 예제**
    - **컨트롤러**:
    ```java
    @Controller
    public class MultiFormController {
        @GetMapping("/multiForm")
        public String showForm() {
            return "multiForm";
        }

        @PostMapping("/processMultiForm")
        public String processForm(@RequestParam("name") String name, @RequestParam("email") String email, Model model) {
            model.addAttribute("name", name);
            model.addAttribute("email", email);
            return "formResult";
        }
    }
    ```
    - **뷰 (multiForm.jsp)**:
    ```html
    <form action="processMultiForm" method="post">
        Name: <input type="text" name="name" />
        Email: <input type="text" name="email" />
        <input type="submit" value="Submit" />
    </form>
    ```
    - **뷰 (formResult.jsp)**:
    ```html
    <p>Submitted name: ${name}</p>
    <p>Submitted email: ${email}</p>
    ```

- **연습용 URL 및 요청값**
    1. URL: `/multiForm1`, 요청값: `busno=1000&passCnt=30`
    2. URL: `/multiForm2`, 요청값: `pname=사과&price=3000&cnt=5`
    3. URL: `/multiForm3`, 요청값: `mname=슈퍼네튜럴&singer=뉴진`

### 7. [컨트롤러/뷰] URL과 요청처리: 객체 (폼 활용)
- **기본 예제**
    - **컨트롤러**:
    ```java
    @Controller
    public class ObjectFormController {
        @GetMapping("/objectForm")
        public String showForm() {
            return "objectForm";
        }

        @PostMapping("/processObjectForm")
        public String processForm(@ModelAttribute User user, Model model) {
            model.addAttribute("user", user);
            return "formResult";
        }
    }

    public class User {
        private String name;
        private String email;
        // Getters and Setters
    }
    ```
    - **뷰 (objectForm.jsp)**:
    ```html
    <form action="processObjectForm" method="post">
        Name: <input type="text" name="name" />
        Email: <input type="text" name="email" />
        <input type="submit" value="Submit" />
    </form>
    ```
    - **뷰 (formResult.jsp)**:
    ```html
    <p>Submitted name: ${user.name}</p>
    <p>Submitted email: ${user.email}</p>
    ```

- **연습용 URL 및 요청값**
    1. URL: `/objectForm1`, 요청값: `busno=1000&passCnt=30`
    2. URL: `/objectForm2`, 요청값: `pname=사과&price=3000&cnt=5`
    3. URL: `/objectForm3`, 요청값: `mname=슈퍼네튜럴&singer=뉴진`

## 학습: 모델 데이터가 무엇인지? 모델 데이터 표현 형식 (EL/JSTL) 이해
### 8. [컨트롤러/뷰] URL과 모델 데이터: 단일 데이터
- **기본 예제**
    - **컨트롤러**:
    ```java
    @Controller
    public class SingleModelController {
        @GetMapping("/singleModel")
        public String showData(Model model) {
            model.addAttribute("message", "Hello, World!");
            return "singleModel";
        }
    }
    ```
    - **뷰 (singleModel.jsp)**:
    ```html
    <p>Message: ${message}</p>
    ```

- **연습용 URL 및 요청값**
    1. URL: `/singleModel`, 모델 데이터: `message=Hello, John!`
    2. URL: `/singleModel`, 모델 데이터: `message=Hello, Jane!`
    3. URL: `/singleModel`, 모델 데이터: `message=Hello, Alex!`

### 9. [컨트롤러/뷰] URL과 모델 데이터: 다중 데이터
- **기본 예제**
    - **컨트롤러**:
    ```java
    @Controller
    public class MultiModelController {
        @GetMapping("/multiModel")
        public String showData(Model model) {
            model.addAttribute("name", "John");
            model.addAttribute("email", "john@example.com");
            return "multiModel";
        }
    }
    ```
    - **뷰 (multiModel.jsp)**:
    ```html
    <p>Name: ${name}</p>
    <p>Email: ${email}</p>
    ```

- **연습용 URL 및 요청값**
    1. URL: `/multiModel`, 모델 데이터: `name=John, email=john@example.com`
    2. URL: `/multiModel`, 모델 데이터: `name=Jane, email=jane@example.com`
    3. URL: `/multiModel`, 모델 데이터: `name=Alex, email=alex@example.com`

### 10. [컨트롤러/뷰] URL과 모델 데이터: 객체 데이터
- **기본 예제**
    - **컨트롤러**:
    ```java
    @Controller
    public class ObjectModelController {
        @GetMapping("/objectModel")
        public String showData(Model model) {
            User user = new User();
            user.setName("John");
            user.setEmail("john@example.com");
            model.addAttribute("user", user);
            return "objectModel";
        }
    }

    public class User {
        private String name;
        private String email;
        // Getters and Setters
    }
    ```
    - **뷰 (objectModel.jsp)**:
    ```html
    <p>Name: ${user.name}</p>
    <p>Email: ${user.email}</p>
    ```

- **연습용 URL 및 요청값**
    1. URL: `/objectModel`, 모델 데이터: `user{name=John, email=john@example.com}`
    2. URL: `/objectModel`, 모델 데이터: `user{name=Jane, email=jane@example.com}`
    3. URL: `/objectModel`, 모델 데이터: `user{name=Alex, email=alex@example.com}`

### 11. [컨트롤러/뷰] URL과 요청값 + 모델 데이터: 단일/다중
- **기본 예제**
    - **컨트롤러**:
    ```java
    @Controller
    public class RequestModelController {
        @GetMapping("/requestModelForm")
        public String showForm() {
            return "requestModelForm";
        }

        @PostMapping("/processRequestModel")
        public String processForm(@RequestParam("name") String name, @RequestParam("email") String email, Model model) {
            model.addAttribute("name", name);
            model.addAttribute("email", email);
            model.addAttribute("message", "Request processed successfully!");
            return "requestModelResult";
        }
    }
    ```
    - **뷰 (requestModelForm.jsp)**:
    ```html
    <form action="processRequestModel" method="post">
        Name: <input type="text" name="name" />
        Email: <input type="text" name="email" />
        <input type="submit" value="Submit" />
    </form>
    ```
    - **뷰 (requestModelResult.jsp)**:
    ```html
    <p>Name: ${name}</p>
    <p>Email: ${email}</p>
    <p>Message: ${message}</p>
    ```

- **연습용 URL 및 요청값**
    1. URL: `/requestModelForm`, 요청값: `name=John&email=john@example.com`
    2. URL: `/requestModelForm`, 요청값: `name=Jane&email=jane@example.com`
    3. URL: `/requestModelForm`, 요청값: `

name=Alex&email=alex@example.com`

### 12. [컨트롤러/뷰] URL과 요청값 + 모델 데이터: 객체/리스트
- **기본 예제**
    - **컨트롤러**:
    ```java
    @Controller
    public class RequestObjectController {
        @GetMapping("/requestObjectForm")
        public String showForm() {
            return "requestObjectForm";
        }

        @PostMapping("/processRequestObject")
        public String processForm(@ModelAttribute User user, Model model) {
            List<String> messages = new ArrayList<>();
            messages.add("Welcome " + user.getName());
            messages.add("Your email: " + user.getEmail());
            model.addAttribute("user", user);
            model.addAttribute("messages", messages);
            return "requestObjectResult";
        }
    }

    public class User {
        private String name;
        private String email;
        // Getters and Setters
    }
    ```
    - **뷰 (requestObjectForm.jsp)**:
    ```html
    <form action="processRequestObject" method="post">
        Name: <input type="text" name="name" />
        Email: <input type="text" name="email" />
        <input type="submit" value="Submit" />
    </form>
    ```
    - **뷰 (requestObjectResult.jsp)**:
    ```html
    <p>Name: ${user.name}</p>
    <p>Email: ${user.email}</p>
    <c:forEach var="message" items="${messages}">
        <p>${message}</p>
    </c:forEach>
    ```

- **연습용 URL 및 요청값**
    1. URL: `/requestObjectForm`, 요청값: `name=John&email=john@example.com`
    2. URL: `/requestObjectForm`, 요청값: `name=Jane&email=jane@example.com`
    3. URL: `/requestObjectForm`, 요청값: `name=Alex&email=alex@example.com`


