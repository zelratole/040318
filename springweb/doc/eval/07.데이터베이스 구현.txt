07.데이터베이스 구현
2024.05.09 (목)요일 2교시

OracleDB에 대한 장단점을 기술하시오


OracleDB는 전 세계적으로 널리 사용되는 관계형 데이터베이스 관리 시스템(RDBMS) 중 하나입니다. 대규모 기업 및 복잡한 데이터 관리 환경에서 특히 인기가 높습니다. 아래는 OracleDB의 주요 장단점입니다.

### 장점

1. **성능 및 확장성**:
   - **높은 성능**: OracleDB는 고성능 데이터 처리를 위해 설계되어 대규모 데이터베이스와 트랜잭션을 효과적으로 처리할 수 있습니다.
   - **확장성**: 클러스터링, 분산 데이터베이스 시스템 및 병렬 처리 기능을 통해 데이터베이스를 수평 및 수직으로 확장할 수 있습니다.

2. **고가용성 및 복구 기능**:
   - **데이터 보호**: 다양한 백업 및 복구 옵션, 재해 복구 솔루션을 통해 데이터 손실을 최소화할 수 있습니다.
   - **Oracle Real Application Clusters (RAC)**: 다중 서버에서 데이터베이스를 운영하여 고가용성과 부하 분산을 제공합니다.

3. **보안**:
   - **강력한 보안 기능**: 데이터 암호화, 접근 제어, 감사 로그 등 다양한 보안 기능을 제공하여 데이터 보호를 강화합니다.
   - **세분화된 권한 관리**: 사용자별 세부적인 권한 설정이 가능하여 보안이 강화됩니다.

4. **풍부한 기능**:
   - **다양한 데이터 유형**: 구조화된 데이터뿐만 아니라 XML, JSON, 공간 데이터 등 다양한 데이터 유형을 지원합니다.
   - **분석 및 BI 도구**: 고급 데이터 분석, 데이터 마이닝 및 비즈니스 인텔리전스 도구를 통합하여 데이터 활용을 극대화합니다.

5. **표준 준수**:
   - **SQL 표준 준수**: ANSI SQL 표준을 준수하여 다른 데이터베이스 시스템과의 호환성을 높입니다.

### 단점

1. **비용**:
   - **높은 라이선스 비용**: OracleDB는 다른 데이터베이스 솔루션에 비해 라이선스 및 유지 관리 비용이 높습니다.
   - **추가 기능 비용**: 고급 기능이나 추가 모듈 사용 시 추가 비용이 발생할 수 있습니다.

2. **복잡성**:
   - **설치 및 관리의 복잡성**: 설치 및 설정 과정이 복잡하여 전문적인 지식이 필요합니다.
   - **관리의 복잡성**: 대규모 시스템에서는 성능 튜닝, 백업 및 복구 등 다양한 관리 작업이 복잡할 수 있습니다.

3. **자원 소모**:
   - **높은 하드웨어 요구 사항**: 높은 성능을 위해 많은 하드웨어 자원이 필요할 수 있습니다.
   - **메모리 및 스토리지 요구**: 대규모 데이터베이스 운영 시 많은 메모리 및 스토리지를 요구합니다.

4. **기술 지원**:
   - **기술 지원 비용**: Oracle의 기술 지원은 유료로 제공되며 비용이 높은 편입니다.

5. **폐쇄성**:
   - **폐쇄된 생태계**: 오라클 제품군 내에서 최적화된 성능을 발휘하므로 다른 오픈 소스 솔루션과의 통합이 어려울 수 있습니다.

### 결론

OracleDB는 성능, 확장성, 보안성 면에서 매우 강력한 데이터베이스 시스템이지만, 비용 및 관리의 복잡성 측면에서 단점이 있습니다. 따라서 대규모 기업 환경에서 주로 사용되며, 중소기업이나 비용에 민감한 프로젝트에서는 다른 데이터베이스 솔루션이 더 적합할 수 있습니다.


OracleDB 설치 과정을 기술하시오


Oracle Database를 Windows 환경에 설치하는 과정은 비교적 직관적이지만, 여러 단계가 포함되어 있어 정확하게 따라야 합니다. 아래는 OracleDB 설치 과정을 단계별로 설명한 것입니다.

### 사전 준비

1. **시스템 요구 사항 확인**:
   - 운영 체제: Windows 10, Windows Server 2016 이상
   - 메모리: 최소 2GB (권장 4GB 이상)
   - 디스크 공간: 최소 10GB 여유 공간
   - 권한: 관리자 권한 필요

2. **Oracle 계정 생성**:
   - [Oracle Technology Network (OTN)](https://www.oracle.com/technetwork/index.html)에서 계정을 생성합니다.

### 설치 과정

1. **설치 파일 다운로드**:
   - Oracle Technology Network (OTN)에서 Oracle Database 설치 파일을 다운로드합니다. 예를 들어, `Oracle Database 19c` 버전을 다운로드할 수 있습니다.

2. **설치 파일 압축 해제**:
   - 다운로드한 압축 파일을 적절한 위치에 압축 해제합니다.

3. **설치 프로그램 실행**:
   - 압축 해제한 폴더에서 `setup.exe` 파일을 실행합니다. 관리자 권한으로 실행해야 합니다.

4. **Oracle Database 설치 시작**:
   - 설치 프로그램이 시작되면, `Oracle Database 19c 설치`를 선택합니다.

5. **설치 옵션 선택**:
   - 설치 유형 선택: `Create and Configure a Single Instance Database`를 선택합니다.
   - 시스템 클래스 선택: `Server Class`를 선택합니다.
   - 설치 유형 선택: `Advanced Installation`을 선택하여 세부 설정을 할 수 있습니다.

6. **Oracle Home 및 Base 설정**:
   - Oracle Base: 기본적으로 `C:\app\oracle` 경로를 사용합니다.
   - Software Location (Oracle Home): `C:\app\oracle\product\19.0.0\dbhome_1` 경로를 사용합니다.

7. **Windows 사용자 계정 설정**:
   - Windows OS 계정 사용 또는 새로운 Windows 사용자 계정을 생성할 수 있습니다. 권장 설정은 기본값을 따릅니다.

8. **Oracle Configuration Manager 설정**:
   - 설정을 원하지 않을 경우 `I wish to remain uninformed...`를 선택하여 생략할 수 있습니다.

9. **데이터베이스 식별자 및 비밀번호 설정**:
   - Global Database Name: 예를 들어 `orcl`을 입력합니다.
   - Oracle System Identifier (SID): `orcl`을 입력합니다.
   - 비밀번호 설정: SYS 및 SYSTEM 계정의 비밀번호를 설정합니다.

10. **스토리지 설정**:
   - 기본값을 따르거나, 데이터 파일 위치를 커스터마이즈할 수 있습니다.

11. **구성 옵션 설정**:
   - 데이터베이스 유형: `General Purpose` 또는 `Transaction Processing`을 선택합니다.
   - Character Set: `Use Unicode (AL32UTF8)`을 권장합니다.

12. **플러그인 데이터베이스 설정**:
   - 기본값을 따르거나, 필요에 따라 플러그인 데이터베이스를 설정할 수 있습니다.

13. **프리레퀴짓 체크**:
   - 설치 전에 모든 요구 사항이 충족되었는지 확인합니다. 문제가 있는 경우 수정 후 다시 시도합니다.

14. **설치 진행**:
   - 설치 요약 화면에서 설정을 확인한 후 `Install` 버튼을 클릭합니다.
   - 설치가 진행되며, 완료되면 Database Configuration Assistant (DBCA)가 자동으로 실행됩니다.

15. **설치 완료**:
   - DBCA에서 데이터베이스 생성이 완료되면, 모든 설치 과정이 종료됩니다.
   - 설치 로그를 확인하여 문제가 없는지 점검합니다.

### 설치 후 설정

1. **환경 변수 설정**:
   - `ORACLE_HOME`과 `PATH` 환경 변수에 Oracle Database 경로를 추가합니다.

2. **서비스 확인**:
   - `Windows Services`에서 Oracle 관련 서비스들이 정상적으로 실행 중인지 확인합니다.

3. **SQL*Plus 접속 테스트**:
   - `SQL*Plus`를 실행하여 데이터베이스에 정상적으로 접속되는지 테스트합니다.
   ```sql
   sqlplus / as sysdba
   ```

### 결론

OracleDB를 Windows 환경에 설치하는 과정은 여러 단계가 포함되어 있지만, 설치 프로그램의 안내를 따라 정확히 진행하면 무리 없이 설치할 수 있습니다. 설치 후에는 환경 변수 설정 및 서비스 상태 확인 등 추가 설정을 통해 정상적인 운영을 보장해야 합니다.




OracleDB 접속하는 클라언트 툴을 2개 이상 설명하시오


Oracle Database에 접속하기 위한 클라이언트 툴은 여러 가지가 있으며, 이 중에서 특히 윈도우 환경에서 많이 사용되는 두 가지 툴을 설명하겠습니다: Oracle SQL Developer와 Toad for Oracle입니다.

### 1. Oracle SQL Developer

**Oracle SQL Developer**는 Oracle에서 제공하는 무료 통합 개발 환경(IDE)으로, SQL 및 PL/SQL 개발을 위한 다양한 기능을 제공합니다. 이 툴은 윈도우를 포함한 여러 운영 체제에서 사용할 수 있습니다.

#### 주요 기능:
- **SQL 및 PL/SQL 개발**: 쿼리 작성, 실행 및 디버깅 기능을 제공합니다.
- **데이터베이스 관리**: 데이터베이스 객체(테이블, 뷰, 인덱스 등)의 생성, 수정 및 삭제를 쉽게 할 수 있습니다.
- **데이터베이스 탐색기**: 데이터베이스 구조를 시각적으로 탐색하고 관리할 수 있습니다.
- **데이터 가져오기/내보내기**: 다양한 형식의 데이터를 쉽게 가져오고 내보낼 수 있습니다.
- **리포팅 및 차트**: 데이터에 대한 리포트 생성 및 차트 작성 기능을 제공합니다.
- **통합 Git 지원**: 버전 관리 시스템과 통합되어 코드 관리가 용이합니다.

#### 설치 및 접속 방법:
1. [Oracle SQL Developer 다운로드 페이지](https://www.oracle.com/tools/downloads/sqldev-downloads.html)에서 최신 버전을 다운로드합니다.
2. 다운로드한 파일을 압축 해제하고 `sqldeveloper.exe` 파일을 실행합니다.
3. 첫 실행 시, Oracle Client의 위치를 물어보는 경우가 있습니다. 설치된 Oracle Client 경로를 지정해줍니다.
4. SQL Developer가 실행되면, `Connections` 탭에서 `New Connection`을 클릭하여 새로운 데이터베이스 연결을 설정합니다.
5. 데이터베이스 호스트, 포트, 서비스 이름, 사용자명 및 비밀번호를 입력하고 `Test` 버튼을 눌러 연결을 테스트합니다.
6. 연결이 성공하면 `Save`를 눌러 저장하고, `Connect`를 눌러 데이터베이스에 접속합니다.

### 2. Toad for Oracle

**Toad for Oracle**은 Quest Software에서 제공하는 상용 데이터베이스 관리 도구입니다. SQL 개발 및 데이터베이스 관리, 성능 튜닝 등의 기능을 제공합니다.

#### 주요 기능:
- **SQL 및 PL/SQL 개발**: 고급 코드 편집기와 디버거를 제공하여 개발 효율성을 높입니다.
- **데이터베이스 관리**: 스키마 브라우저를 통해 데이터베이스 객체를 쉽게 관리할 수 있습니다.
- **성능 튜닝**: SQL Optimizer 및 성능 모니터링 도구를 통해 데이터베이스 성능을 최적화할 수 있습니다.
- **데이터베이스 비교**: 스키마 및 데이터 비교 도구를 통해 데이터베이스 간의 차이를 분석하고 동기화할 수 있습니다.
- **리포팅 및 자동화**: 다양한 리포트 작성 도구와 자동화 스크립트를 지원합니다.

#### 설치 및 접속 방법:
1. [Toad for Oracle 다운로드 페이지](https://www.quest.com/products/toad-for-oracle/)에서 설치 파일을 다운로드합니다. 무료 평가판을 사용할 수 있습니다.
2. 다운로드한 설치 파일을 실행하고 설치를 진행합니다.
3. 설치가 완료되면 Toad for Oracle을 실행합니다.
4. 실행 후, `New Connection` 아이콘을 클릭하여 새로운 데이터베이스 연결을 설정합니다.
5. 데이터베이스 호스트, 포트, 서비스 이름, 사용자명 및 비밀번호를 입력하고 `Connect` 버튼을 눌러 데이터베이스에 접속합니다.

### 결론

**Oracle SQL Developer**와 **Toad for Oracle**은 윈도우 환경에서 Oracle Database에 접속하고 관리할 수 있는 강력한 클라이언트 툴입니다. SQL Developer는 무료로 제공되며 기본적인 기능부터 고급 기능까지 폭넓게 지원하는 반면, Toad for Oracle은 유료 소프트웨어로 더 많은 고급 기능과 성능 최적화 도구를 제공합니다. 사용자 필요에 따라 적합한 툴을 선택하여 사용하면 됩니다.



OracleDB에 MyDB라는 데이터 베이스를 작성하는 명령을 기술 하시오

OracleDB에서 데이터베이스를 생성하는 명령은 `CREATE DATABASE` 문을 사용하여 수행됩니다. 다만 OracleDB에서는 보통 데이터베이스 생성 후에 추가적인 설정이 필요할 수 있습니다 (예: 데이터 파일 위치 지정, 문자 집합 설정 등). 아래는 OracleDB에서 MyDB라는 데이터베이스를 생성하는 기본적인 명령 예제입니다.

```sql
CREATE DATABASE MyDB
    USER SYS IDENTIFIED BY oracle
    USER SYSTEM IDENTIFIED BY oracle
    LOGFILE GROUP 1 ('/path/to/logfile1a.log', '/path/to/logfile1b.log') SIZE 100M,
             GROUP 2 ('/path/to/logfile2a.log', '/path/to/logfile2b.log') SIZE 100M
    MAXLOGFILES 5
    MAXLOGMEMBERS 5
    MAXLOGHISTORY 100
    MAXDATAFILES 100
    CHARACTER SET AL32UTF8
    NATIONAL CHARACTER SET AL16UTF16
    EXTENT MANAGEMENT LOCAL
    DATAFILE '/path/to/system01.dbf' SIZE 100M REUSE
    DEFAULT TEMPORARY TABLESPACE temp
        TEMPFILE '/path/to/temp01.dbf' SIZE 50M REUSE
    UNDO TABLESPACE undotbs
        DATAFILE '/path/to/undotbs01.dbf' SIZE 100M REUSE AUTOEXTEND ON MAXSIZE UNLIMITED;
```

이 명령은 다음을 포함합니다:

- `CREATE DATABASE MyDB`: MyDB라는 이름의 데이터베이스를 생성합니다.
- `USER SYS IDENTIFIED BY oracle`, `USER SYSTEM IDENTIFIED BY oracle`: SYS 및 SYSTEM 사용자를 생성하고 초기 비밀번호를 'oracle'로 설정합니다.
- `LOGFILE`: 로그 파일 그룹을 정의하고 크기 및 수를 지정합니다.
- `MAXLOGFILES`, `MAXLOGMEMBERS`, `MAXLOGHISTORY`, `MAXDATAFILES`: 로그 파일 및 데이터 파일의 최대 갯수 및 히스토리 크기를 설정합니다.
- `CHARACTER SET`, `NATIONAL CHARACTER SET`: 데이터베이스의 문자 집합을 지정합니다.
- `EXTENT MANAGEMENT LOCAL`: 로컬 할당 방식을 사용하여 익스텐트 관리를 설정합니다.
- `DATAFILE`, `TEMPFILE`, `UNDO TABLESPACE`: 데이터 파일 및 임시 테이블스페이스, UNDO 테이블스페이스를 지정하고 관리 옵션을 설정합니다.

이 명령어는 OracleDB의 실제 환경에 맞추어 필요에 따라 세부적으로 수정해야 할 수 있습니다. OracleDB에서 데이터베이스를 생성할 때는 추가적인 설정이 필요한 경우가 많으므로, OracleDB 문서를 참조하거나 DBA의 지원을 받는 것이 좋습니다.



OracleDB 에서 구조를 만드는 명령을 기술 하시오


OracleDB에서 데이터베이스 객체(테이블, 뷰, 인덱스 등)를 생성하는 명령어는 다양합니다. 주로 사용되는 명령어들을 몇 가지 예시와 함께 설명드리겠습니다.

### 1. 테이블 생성하기

테이블을 생성하는 명령어는 `CREATE TABLE`을 사용합니다. 아래는 간단한 예제입니다.

```sql
CREATE TABLE employees (
    employee_id NUMBER(5) PRIMARY KEY,
    first_name VARCHAR2(50),
    last_name VARCHAR2(50),
    email VARCHAR2(100),
    hire_date DATE,
    salary NUMBER(10, 2),
    department_id NUMBER(5)
);
```

- `CREATE TABLE employees`: employees라는 테이블을 생성합니다.
- `( ... )`: 괄호 내에 각 열(Column)의 이름과 데이터 타입을 정의합니다.
- `employee_id NUMBER(5) PRIMARY KEY`: employee_id 열을 주키(Primary Key)로 지정합니다.
- `VARCHAR2`, `NUMBER`, `DATE` 등은 데이터 타입을 지정합니다.
- `PRIMARY KEY`, `FOREIGN KEY`, `NOT NULL` 등의 제약 조건을 추가할 수 있습니다.

### 2. 뷰 생성하기

뷰를 생성하는 명령어는 `CREATE VIEW`를 사용합니다. 아래는 간단한 예제입니다.

```sql
CREATE VIEW employee_details AS
SELECT e.employee_id, e.first_name, e.last_name, e.email, d.department_name
FROM employees e
JOIN departments d ON e.department_id = d.department_id;
```

- `CREATE VIEW employee_details`: employee_details라는 뷰를 생성합니다.
- `AS SELECT ...`: SELECT 문을 사용하여 뷰의 쿼리를 정의합니다.
- `JOIN`을 통해 다른 테이블의 데이터를 조인하여 뷰를 정의할 수 있습니다.

### 3. 인덱스 생성하기

인덱스를 생성하는 명령어는 `CREATE INDEX`를 사용합니다. 아래는 간단한 예제입니다.

```sql
CREATE INDEX idx_employee_email ON employees(email);
```

- `CREATE INDEX idx_employee_email`: idx_employee_email이라는 인덱스를 생성합니다.
- `ON employees(email)`: employees 테이블의 email 열에 인덱스를 생성합니다.

### 4. 시퀀스 생성하기

시퀀스를 생성하는 명령어는 `CREATE SEQUENCE`를 사용합니다. 아래는 간단한 예제입니다.

```sql
CREATE SEQUENCE employee_seq
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;
```

- `CREATE SEQUENCE employee_seq`: employee_seq라는 시퀀스를 생성합니다.
- `START WITH 1`: 시퀀스의 시작 값이 1입니다.
- `INCREMENT BY 1`: 시퀀스의 증가 값이 1입니다.
- `NOCACHE`, `NOCYCLE`: 캐시 없이 순환 없이 시퀀스를 생성합니다.

### 5. 저장 프로시저 생성하기

저장 프로시저를 생성하는 명령어는 `CREATE PROCEDURE`를 사용합니다. 아래는 간단한 예제입니다.

```sql
CREATE OR REPLACE PROCEDURE get_employee_info (p_employee_id IN NUMBER)
IS
    v_first_name VARCHAR2(50);
    v_last_name VARCHAR2(50);
BEGIN
    SELECT first_name, last_name INTO v_first_name, v_last_name
    FROM employees
    WHERE employee_id = p_employee_id;

    DBMS_OUTPUT.PUT_LINE('Employee Name: ' || v_first_name || ' ' || v_last_name);
END;
```

- `CREATE OR REPLACE PROCEDURE get_employee_info`: get_employee_info라는 저장 프로시저를 생성하거나, 이미 존재한다면 교체합니다.
- `(p_employee_id IN NUMBER)`: 입력 파라미터를 정의합니다.
- `IS ... BEGIN ... END;`: 저장 프로시저의 본문을 정의합니다.
- `DBMS_OUTPUT.PUT_LINE`: 결과를 출력합니다.



OracleDB에 user1이란 계정을 생성하고 MyDB에 모든 권한을 부여하시오


OracleDB에서 user1이라는 계정을 생성하고 MyDB 데이터베이스에 모든 권한을 부여하는 과정은 다음과 같이 진행됩니다.

### 1. 계정 생성하기

먼저, user1이라는 계정을 생성합니다. 이 과정에서는 계정의 이름과 초기 비밀번호를 설정합니다.

```sql
CREATE USER user1 IDENTIFIED BY password;
```

- `CREATE USER user1`: user1이라는 이름의 계정을 생성합니다.
- `IDENTIFIED BY password`: 계정의 초기 비밀번호를 설정합니다. 여기서 `password`는 실제 비밀번호로 대체되어야 합니다.

### 2. 권한 부여하기

생성된 계정에 MyDB 데이터베이스에 대한 모든 권한을 부여합니다. 여기서는 `GRANT` 문을 사용하여 권한을 설정합니다.

```sql
GRANT CONNECT, RESOURCE, DBA TO user1;
```

- `GRANT CONNECT`: 계정에 데이터베이스에 연결할 수 있는 권한을 부여합니다.
- `GRANT RESOURCE`: 계정에 테이블, 시퀀스, 프로시저 등을 생성할 수 있는 권한을 부여합니다.
- `GRANT DBA`: 데이터베이스 관리자 권한을 부여하여 모든 데이터베이스 객체에 대한 권한을 부여합니다. 이 옵션은 모든 권한을 포함하므로 주의해서 사용해야 합니다.

### 3. 권한 확인

계정에 대한 권한이 제대로 설정되었는지 확인할 수 있습니다.

```sql
SELECT * FROM dba_sys_privs WHERE grantee = 'USER1';
```

위 쿼리는 user1에게 부여된 시스템 권한을 조회합니다. 필요에 따라 추가적인 권한 설정이 필요할 수 있습니다. OracleDB의 권한 관리는 데이터베이스 보안 및 접근 제어를 중요하게 다루므로, 최소한의 권한 원칙(Minimal Privilege Principle)을 준수하는 것이 좋습니다.



OracleDB에 1줄 메모장을 저장할 수 있는 테이블을 작성하시오

OracleDB에 1줄 메모를 저장할 수 있는 간단한 테이블을 작성하는 방법은 다음과 같습니다.

```sql
CREATE TABLE memo (
    memo_id NUMBER GENERATED ALWAYS AS IDENTITY, -- 자동으로 생성되는 일련번호
    memo_content VARCHAR2(255), -- 메모 내용, 최대 255자
    created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- 생성 일시 (기본값: 현재 시각)
    CONSTRAINT memo_pk PRIMARY KEY (memo_id) -- 주키 제약 조건
);
```

위의 SQL 명령어는 다음과 같은 구성 요소를 가집니다:

- `CREATE TABLE memo`: memo라는 테이블을 생성합니다.
- `memo_id NUMBER GENERATED ALWAYS AS IDENTITY`: 자동으로 생성되는 일련번호 열을 만듭니다. 이 열은 주로 기본 키(PK)로 사용됩니다.
- `memo_content VARCHAR2(255)`: 메모 내용을 저장하는 VARCHAR2 형식의 열을 정의합니다. 최대 255자까지 저장할 수 있습니다.
- `created_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP`: 메모가 생성된 일시를 저장하는 TIMESTAMP 형식의 열을 정의하며, 기본값으로 현재 시각이 설정됩니다.
- `CONSTRAINT memo_pk PRIMARY KEY (memo_id)`: memo_id 열을 주키(PK)로 설정하여 각 메모를 고유하게 식별합니다.

이 테이블을 생성하면 간단한 메모를 저장하고 조회할 수 있는 구조가 마련됩니다. 메모 내용과 생성 일시는 각각의 열에 저장되며, memo_id는 자동으로 증가하는 일련번호로 메모를 고유하게 식별합니다.


2-4에서 생성한 테이블에 name 필드를 기준으로 인덱스를 생성하시오

이전에 생성한 `memo` 테이블에 `name` 필드를 기준으로 인덱스를 생성하는 방법을 아래와 같이 설명합니다.

### 1. 인덱스 생성하기

인덱스를 생성하는 명령어는 `CREATE INDEX`를 사용합니다. 여기서는 `name` 필드에 대한 인덱스를 생성합니다.

```sql
CREATE INDEX idx_memo_name ON memo(name);
```

위의 SQL 명령어는 다음과 같은 구성 요소를 가집니다:

- `CREATE INDEX idx_memo_name`: idx_memo_name이라는 인덱스를 생성합니다.
- `ON memo(name)`: memo 테이블의 `name` 열에 인덱스를 생성합니다.

### 2. 인덱스 사용하기

이제 `name` 필드에 대한 인덱스가 생성되었으므로, 해당 필드를 이용한 검색이 빨라질 수 있습니다. 예를 들어, `name` 필드를 이용한 검색 쿼리는 다음과 같이 인덱스를 활용할 수 있습니다.

```sql
SELECT * FROM memo WHERE name = 'example_name';
```

이렇게 하면 `name` 필드를 기준으로 빠르게 검색할 수 있습니다. 인덱스는 데이터베이스 성능을 향상시키는 중요한 요소 중 하나이므로, 데이터베이스의 쿼리 성능을 고려할 때 적절히 활용하는 것이 좋습니다.

2-4에서 생성한 테이블의 제약조건을 확인하는 쿼리를 작성하시오


2-4에서 생성한 `memo` 테이블의 제약 조건을 확인하기 위해서는 `USER_CONSTRAINTS` 시스템 뷰와 `ALL_CONSTRAINTS` 시스템 뷰를 사용할 수 있습니다. 각각의 시스템 뷰는 데이터베이스에서 사용 가능한 제약 조건에 대한 정보를 제공합니다.

### 1. USER_CONSTRAINTS 시스템 뷰를 이용한 제약 조건 확인

`USER_CONSTRAINTS` 시스템 뷰는 현재 사용자가 소유한 객체의 제약 조건에 대한 정보를 제공합니다. 다음 쿼리를 사용하여 `memo` 테이블의 제약 조건을 확인할 수 있습니다.

```sql
SELECT constraint_name, constraint_type, table_name
FROM user_constraints
WHERE table_name = 'MEMO';
```

이 쿼리는 다음과 같은 정보를 반환합니다:
- `constraint_name`: 제약 조건의 이름
- `constraint_type`: 제약 조건의 유형 (예: PRIMARY KEY, FOREIGN KEY, UNIQUE 등)
- `table_name`: 제약 조건이 적용된 테이블 이름 (여기서는 'MEMO')

### 2. ALL_CONSTRAINTS 시스템 뷰를 이용한 제약 조건 확인

`ALL_CONSTRAINTS` 시스템 뷰는 데이터베이스에서 접근 가능한 모든 제약 조건에 대한 정보를 제공합니다. 다음 쿼리를 사용하여 `memo` 테이블의 모든 제약 조건을 확인할 수 있습니다.

```sql
SELECT constraint_name, constraint_type, table_name, owner
FROM all_constraints
WHERE table_name = 'MEMO' AND owner = 'YOUR_SCHEMA_OWNER';
```

여기서 `YOUR_SCHEMA_OWNER`는 `memo` 테이블을 소유한 스키마의 소유자입니다. 이 값을 알기 위해서는 다음 쿼리를 실행하여 확인할 수 있습니다.

```sql
SELECT owner FROM all_tables WHERE table_name = 'MEMO';
```

위의 쿼리들을 사용하여 `memo` 테이블에 적용된 모든 제약 조건을 확인할 수 있습니다. 이를 통해 데이터베이스의 구조와 제약 조건에 대한 이해를 높이고 관리할 수 있습니다.



3-1에서 생성한 인덱스를 확인하는 쿼리를 작성하시오


3-1에서 생성한 `name` 필드를 기준으로 생성한 인덱스를 확인하는 방법은 `USER_INDEXES` 또는 `ALL_INDEXES` 시스템 뷰를 사용하여 할 수 있습니다. 여기서는 현재 사용자가 소유한 인덱스를 확인하는 예제를 보여드리겠습니다.

### 1. USER_INDEXES 시스템 뷰를 이용한 인덱스 확인

`USER_INDEXES` 시스템 뷰는 현재 사용자가 소유한 인덱스에 대한 정보를 제공합니다. 다음 쿼리를 사용하여 `name` 필드를 기준으로 생성한 인덱스를 확인할 수 있습니다.

```sql
SELECT index_name, table_name, uniqueness
FROM user_indexes
WHERE table_name = 'MEMO' AND index_name = 'IDX_MEMO_NAME';
```

- `index_name`: 인덱스의 이름
- `table_name`: 인덱스가 생성된 테이블 이름
- `uniqueness`: 인덱스의 고유성 여부 (UNIQUE 또는 NONUNIQUE)

위의 쿼리에서 `IDX_MEMO_NAME`은 3-1에서 생성한 `name` 필드를 기준으로 생성한 인덱스의 이름을 가정한 것입니다. 실제 인덱스 이름을 사용하여 쿼리를 실행해야 합니다.

### 2. ALL_INDEXES 시스템 뷰를 이용한 인덱스 확인

`ALL_INDEXES` 시스템 뷰는 데이터베이스에서 접근 가능한 모든 인덱스에 대한 정보를 제공합니다. 다음 쿼리를 사용하여 `name` 필드를 기준으로 생성한 모든 인덱스를 확인할 수 있습니다.

```sql
SELECT index_name, table_name, uniqueness, owner
FROM all_indexes
WHERE table_name = 'MEMO' AND index_name = 'IDX_MEMO_NAME' AND owner = 'YOUR_SCHEMA_OWNER';
```

여기서 `YOUR_SCHEMA_OWNER`는 `MEMO` 테이블을 소유한 스키마의 소유자입니다. 위의 예제에서도 `IDX_MEMO_NAME`과 `YOUR_SCHEMA_OWNER` 값을 실제로 알맞게 바꿔서 쿼리를 실행해야 합니다.

### 참고사항

위의 예제에서는 `MEMO` 테이블과 `name` 필드를 기준으로 생성한 인덱스를 가정하여 설명하였습니다. 실제 테이블 이름, 필드 이름, 인덱스 이름은 해당 데이터베이스 환경에 맞추어 적절히 변경하여 사용해야 합니다.













