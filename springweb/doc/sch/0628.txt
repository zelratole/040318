### MyBatis와 Spring MVC 연습

#### 1. 흥미로운 도입
MyBatis와 Spring MVC는 현대적인 자바 애플리케이션 개발에서 매우 중요한 역할을 합니다.
 MyBatis는 데이터베이스 접근을 단순화하고, Spring MVC는 웹 애플리케이션의 
 구조를 체계적으로 설계할 수 있게 도와줍니다. 이 둘을 조합하면 유지보수성이 뛰어나고,
  효율적으로 작동하는 애플리케이션을 개발할 수 있습니다. 여러분이 곧 경험하게 될 
  이 연습은 실전에서의 적용 가능성을 염두에 두고 설계되었습니다.

#### 2. 학습목표
- **MyBatis**: SQL Mapper 프레임워크를 이해하고, XML 매핑 파일을 통해 
	SQL 쿼리를 작성하고 실행할 수 있다.
- **Spring MVC**: MVC 패턴의 기본 구조를 이해하고, 컨트롤러, 서비스, 
    DAO 레이어를 활용하여 웹 애플리케이션을 개발할 수 있다.
- **연동**: MyBatis와 Spring MVC를 연동하여 데이터베이스와 상호작용하는 
   웹 애플리케이션을 완성할 수 있다.

#### 3. 주요 핵심 키워드와 핵심개념
- **MyBatis**: SQL Mapper, XML 매핑 파일, 동적 SQL, Result Map, 
      Parameter Map
- **Spring MVC**: MVC 패턴, DispatcherServlet, Controller, 
      Service, DAO, Model, ViewResolver
- **연동**: SqlSessionFactory, DataSource, MyBatis-Spring 
      Integration, 트랜잭션 관리

#### 4. 퀴즈문제/토론과제
**퀴즈문제**:
1. MyBatis에서 Result Map이란 무엇인가?
2. Spring MVC에서 DispatcherServlet의 역할은 무엇인가?
3. MyBatis와 Spring의 트랜잭션 관리 방식의 차이점은 무엇인가?

**토론과제**:
1. MyBatis의 동적 SQL 기능이 실제 애플리케이션 개발에서 어떤 상황에서 유용할지
   토론해보세요.
2. Spring MVC를 사용할 때의 장점과 단점을 다른 웹 프레임워크와 비교하여 
   논의해보세요.

#### 5. 실무적용사례
**사례 1**: 한 중견 IT 기업에서는 기존의 레거시 시스템을 마이그레이션하는 
    과정에서 MyBatis와 Spring MVC를 도입했습니다. MyBatis를 통해 기존의 
    복잡한 SQL 쿼리들을 쉽게 재사용할 수 있었고, Spring MVC를 통해 클린 
    아키텍처로 애플리케이션을 재구성하여 유지보수성과 확장성을 크게 향상시켰습니다.

**사례 2**: 전자 상거래 플랫폼을 운영하는 한 스타트업에서는 빠른 개발 속도와 
   유지보수의 용이성을 위해 MyBatis와 Spring MVC를 채택했습니다. 
   특히 MyBatis의 동적 SQL 기능을 활용하여 다양한 검색 조건을 지원하는 
    기능을 구현했으며, Spring MVC를 통해 RESTful API를 제공하여 모바일
     애플리케이션과의 연동을 효율적으로 처리했습니다.



# 공통
1. 다음주부터 구현내용 시연, 발표자료는 목(17:00)까지 전달 완료를 목표.
2. 지난주에 이야기한 진행 프로세스(일단위, 주단위, 전체) 방법 마련,  단위 테스트/코드 리뷰 처리방법 기술 페이지 추가.
3. 설계상세, 구현상세 ==> 설계, 구현 표현(ps-상세가 따로 표현 될려면 전체내용이 표현으로 구분 되는게 있을 때)
4. 모든 내용 중앙정렬 ==> 정렬에 대한 원칙 정리, 설명내용 왼쪽 정렬을 권유(numbering) 
5. Risk 관리 항목 추가(발생내용, 원인분석/처리방안/진행결과, 재발방지대책)





2조
1. 고객 정보 조회 검색시, 각각의 내용을 검색인데 and 조건으로 처리되는지? 각각의 항목에 검색(재현시 front설계 첫화면) ?
	(이전에 feedback?)
2. 이슈에 대한 문제만 기술하지 말고 어떻게 처리했는지? 앞으로 재발방지를 위한 처리는 어떻게 되는지?
3. 지난주에 이야기한 진행 프로세스(일단위, 주단위, 전체) 방법 마련,  단위 테스트/코드 리뷰 처리방법
4. 개인별 진행 사항을 명확히 구분하여 이번주와 다음 주 진행 계획 표현합니다.
# 공통
1. 다음주부터 구현내용 시연, 발표자료는 목(17:00)까지 전달 완료를 목표.
2. 지난주에 이야기한 진행 프로세스(일단위, 주단위, 전체) 방법 마련,  단위 테스트/코드 리뷰 처리방법 기술 페이지 추가.
3. 설계상세, 구현상세 ==> 설계, 구현 표현(ps-상세가 따로 표현 될려면 전체내용이 표현으로 구분 되는게 있을 때)
4. 모든 내용 중앙정렬 ==> 정렬에 대한 원칙 정리, 설명내용 왼쪽 정렬을 권유(numbering) 
5. Risk 관리 항목 추가(발생내용, 원인분석/처리방안/진행결과, 재발방지대책)








3조
1. 테이블 설계 ==> 데이터베이스 설계로 변환, 화면 ==> ERD로 표현
2. 상세라는 말 삭제...(설계상세==> 설계, 구현상세==> 구현)
3. 화면코드는 밝은 바탕으로 통일(이전에 feedback?)
4. 설명내용 왼쪽 정렬로 numbering(이전에 타조feedback?)
# 공통
1. 다음주부터 구현내용 시연, 발표자료는 목(17:00)까지 전달 완료를 목표.
2. 지난주에 이야기한 진행 프로세스(일단위, 주단위, 전체) 방법 마련,  단위 테스트/코드 리뷰 처리방법 기술 페이지 추가.
3. 설계상세, 구현상세 ==> 설계, 구현 표현(ps-상세가 따로 표현 될려면 전체내용이 표현으로 구분 되는게 있을 때)
4. 모든 내용 중앙정렬 ==> 정렬에 대한 원칙 정리, 설명내용 왼쪽 정렬을 권유(numbering) 
5. Risk 관리 항목 추가(발생내용, 원인분석/처리방안/진행결과, 재발방지대책)



태형
1. 필요한 이유 ==> "목표" 정도로 표현
2. 업무 내용에 각각의 대상에 대한 표현은 좋으나 하나는 빠져 있음 ==> 통합 정도로 표현
3. 일정 및 계획 ==> 날짜 표현, 
4. 코드 내용 피드백을 할 수 있는 코드는 안 보임..

1조
1. 화면설계서에 입력항목에 대한 유효성/권한에 대한 표현(숫자형인지? 어떤 형식인지? 필수부분인지?) - 
	권한 경우 주요항목이라 따로 표현 필요
2. 구현 내용? 
3. 진행현황(금주? ==> 전체 진행계획대비 진행사항도 표현)
# 공통
1. 다음주부터 구현내용 시연, 발표자료는 목(17:00)까지 전달 완료를 목표.
2. 지난주에 이야기한 진행 프로세스(일단위, 주단위, 전체) 방법 마련,  단위 테스트/코드 리뷰 처리방법 기술 페이지 추가.
3. 설계상세, 구현상세 ==> 설계, 구현 표현(ps-상세가 따로 표현 될려면 전체내용이 표현으로 구분 되는게 있을 때)
4. 모든 내용 중앙정렬 ==> 정렬에 대한 원칙 정리, 설명내용 왼쪽 정렬을 권유(numbering) 
5. Risk 관리 항목 추가(발생내용, 원인분석/처리방안/진행결과, 재발방지대책)





