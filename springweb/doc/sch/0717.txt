### 1. 흥미로운 도입

웹소켓(WebSocket)은 HTTP와는 다른 실시간 양방향 통신을 가능하게 하는 프로토콜로, 
실시간 채팅 애플리케이션, 온라인 게임, 실시간 주식 거래 등 다양한 분야에서 활용됩니다. 특히, Spring Boot와 함께 사용하면 빠르고 효율적인 웹 애플리케이션을 개발할 수 있습니다. 이번 글에서는 Spring Boot를 통해 웹소켓을 활용한 채팅 애플리케이션을 구축하는 방법을 살펴보겠습니다. 실시간으로 메시지를 주고받는 채팅 애플리케이션을 만들어봄으로써 웹소켓의 강력한 기능과 이를 구현하는 과정을 체험해 보세요.

### 2. 학습목표

- Spring Boot와 웹소켓의 기본 개념을 이해하고 이를 활용한 애플리케이션을 개발할 수 있다.
- 실시간 통신의 필요성과 장점을 파악하고 웹소켓을 사용한 실시간 애플리케이션의 작동 원리를 이해한다.
- Spring Boot를 사용하여 웹소켓 기반의 채팅 애플리케이션을 단계별로 구현하는 방법을 익힌다.
- 웹소켓을 통해 클라이언트와 서버 간의 양방향 통신을 설정하고 관리할 수 있다.

### 3. 주요 핵심 키워드와 핵심개념

- **WebSocket**: HTTP의 제한을 극복한 프로토콜로, 클라이언트와 서버 간의 실시간 양방향 통신을 가능하게 함.
- **Spring Boot**: 스프링 프레임워크의 서브셋으로, 독립 실행형 애플리케이션을 빠르게 구축할 수 있도록 지원.
- **STOMP**: Simple Text Oriented Messaging Protocol의 약자로, WebSocket 위에서 메시징을 처리하기 위한 프로토콜.
- **Controller**: Spring MVC에서 사용되는 구성 요소로, HTTP 요청을 처리하고 적절한 응답을 반환.
- **Message Broker**: 메시지 전달을 중계하는 역할을 하며, Spring에서는 기본적으로 내장된 심플 브로커 사용.

### 4. 퀴즈문제/토론과제

#### 퀴즈문제

1. 웹소켓이 HTTP와 다른 점은 무엇인가요?
2. Spring Boot에서 웹소켓을 설정할 때 필요한 기본 구성 요소는 무엇인가요?
3. STOMP 프로토콜의 역할은 무엇인가요?

#### 토론과제

1. 실시간 통신이 필요한 애플리케이션의 예를 들어보고, 웹소켓이 왜 적합한지 논의해 보세요.
2. 웹소켓을 활용한 채팅 애플리케이션에서 발생할 수 있는 보안 문제와 이를 해결하기 위한 방안을 논의해 보세요.
3. 웹소켓을 사용하지 않고 실시간 기능을 구현할 수 있는 다른 방법들을 비교해 보세요.

### 5. 실무적용사례

1. **실시간 협업 도구**: Google Docs와 같은 협업 도구는 여러 사용자가 동시에 문서를 편집할 수 있도록 합니다. 이를 위해 웹소켓을 사용하여 실시간으로 변경 사항을 전달합니다.
2. **온라인 게임**: 실시간 멀티플레이어 게임에서는 플레이어 간의 즉각적인 상호작용이 필요합니다. 웹소켓을 사용하면 플레이어의 행동과 게임 상태를 실시간으로 동기화할 수 있습니다.
3. **주식 거래 플랫폼**: 주식 거래에서는 초 단위로 변동하는 가격 정보를 실시간으로 제공해야 합니다. 웹소켓을 통해 클라이언트에게 실시간 주식 정보를 빠르게 전달할 수 있습니다.
4. **고객 서비스 채팅**: 고객 지원을 위한 라이브 채팅 시스템은 고객과 지원 담당자가 실시간으로 소통할 수 있도록 합니다. 웹소켓을 통해 빠르고 효율적인 메시지 전달이 가능합니다.

# 프로젝트 진행 시작
1. 프로젝트 그동안 피드백 사항 정리 
2. 이번 최종 프로젝트 리스크 관리
	ex)
	1) 일정 진행에 대한 문제
3. 주제 및 핵심 기능 정리/역할 분담
------ ~7/18(~16:30) 텍스트로 정리해서 전달
4. 일정 계획
	1) 최종 발표 8/26
	2) 통합테스트 기간 3일
	3) 각 단위 테스트(주단위)
	4) 매주 월요일 발표
5. 금주 주요 내용(7/22-발표내용)
    0) 기본 ppt 템플릿 설정 완료(목표/역할분담/일정계획/요구사항정의서/화면설계/DB설계)
	1) 설계 완료/공통 기능(메인화면 초기화/기본 화면구성-bootstrap템플릿)
	2) 단위 테스트 내용 : 위 환경설정(server/client/DB서버)
	3) 개발 환경(고정ip 사용 조-요청)
		DB서버 : 공통 원격 서버로 설정
		git/svn : 소스 공유
		web서버 : 공통 원격 서버


		
		 	
	 


