## 1. 흥미로운 도입

jQuery를 사용하여 웹 페이지의 일부를 새로고침 없이 업데이트할 수 있는 방법을 알고 계신가요?
 만약 그렇지 않다면, 여러분은 AJAX의 세계로 첫 걸음을 내딛게 될 것입니다. 
 AJAX는 Asynchronous JavaScript and XML의 약자로, 서버와 통신하면서 
 웹 페이지의 동적인 변화를 가능하게 합니다. 여러분은 이제 jQuery를 사용하여 AJAX를 
 구현하는 방법을 배우게 될 것입니다. 실습을 통해 서버와 비동기 통신을 하고, 데이터를 주고받으며,
 이를 통해 더 나은 사용자 경험을 제공하는 웹 페이지를 만들어 봅시다.

## 2. 학습목표

- jQuery를 사용하여 AJAX 요청을 보내고 응답을 처리하는 방법을 이해한다.
- 서버로부터 데이터를 비동기적으로 받아와 웹 페이지에 반영하는 방법을 학습한다.
- AJAX 요청의 다양한 유형(GET, POST 등)을 이해하고 이를 적절히 활용할 수 있다.
- AJAX 요청 시 발생할 수 있는 오류를 처리하는 방법을 습득한다.

## 3. 주요 핵심 키워드와 핵심개념

- **AJAX**: 비동기 JavaScript와 XML을 사용하여 서버와 통신하고 웹 페이지를 
     부분적으로 업데이트하는 기술.
- **jQuery**: 자바스크립트 라이브러리로, HTML 문서의 트래버설과 조작, 이벤트 핸들링, 
     애니메이션, AJAX 간소화를 지원.
- **GET 요청**: 서버로부터 데이터를 가져오는 요청 방식.
- **POST 요청**: 서버로 데이터를 보내는 요청 방식.
- **JSON**: JavaScript Object Notation의 약자로, 데이터를 저장하고 전송하기 위한 
    형식.  ex) 대시보드 chart ==> chart.js(lib), 
    		  gantt chart(일정 WBS계획) ==> gannt.js(lib) 
- **비동기 통신**: 요청을 보낸 후 서버 응답을 기다리지 않고 다른 작업을 수행할 수 있는 
	통신 방식.

## 4. 퀴즈문제/토론과제

### 퀴즈문제
1. jQuery를 사용하여 AJAX 요청을 보낼 때 사용되는 기본 함수는 무엇인가요?
2. AJAX 요청의 주요 구성 요소에는 어떤 것들이 있나요?
3. POST 요청을 통해 서버로 데이터를 전송할 때, 데이터를 전달하는 방식은 무엇인가요?

### 토론과제
1. AJAX를 사용한 웹 페이지의 장점과 단점에 대해 토론해 봅시다.
2. AJAX를 사용하는 대신 전통적인 폼 제출 방식과 페이지 리로드를 사용하는 경우가 더 적절한 상황에 대해 논의해 봅시다.
3. 보안 관점에서 AJAX 요청을 다룰 때 고려해야 할 사항은 무엇인지 이야기해 봅시다.

## 5. 실무적용사례

### 예시 1: 실시간 검색 기능
웹 사이트에서 검색어를 입력할 때마다 검색 결과가 즉시 나타나는 경험을 제공할 수 있습니다. 사용자가 입력할 때마다 AJAX 요청을 보내 서버에서 관련 데이터를 받아와 화면에 실시간으로 표시합니다.

```html
<input type="text" id="search" placeholder="검색어를 입력하세요">
<div id="results"></div>

<script>
  $(document).ready(function(){
    $("#search").keyup(function(){
      let query = $(this).val();
      if(query != ""){
        $.ajax({
          url: 'search.do',
          method: 'POST',
          data: {query: query},
          success: function(data){
            $("#results").html(data);
          }
        });
      } else {
        $("#results").html("");
      }
    });
  });
</script>
```

### 예시 2: 댓글 시스템
블로그 게시물이나 기사 아래에 AJAX를 사용하여 댓글을 추가하고, 새 댓글이 바로 표시되도록 할 수 있습니다. 페이지를 새로고침하지 않고 댓글을 서버에 저장하고, 댓글 목록을 업데이트합니다.

```html
<form id="commentForm">
  <textarea id="comment" placeholder="댓글을 입력하세요"></textarea>
  <button type="submit">댓글 달기</button>
</form>
<div id="commentList"></div>

<script>
  $(document).ready(function(){
    $("#commentForm").submit(function(e){
      e.preventDefault();
      let comment = $("#comment").val();
      $.ajax({
        url: 'post_comment.do',
        method: 'POST',
        data: {comment: comment},
        success: function(data){
          $("#commentList").append(data);
          $("#comment").val('');
        }
      });
    });
  });
</script>
```
# ajax에서 주로 사용되는 처리 내용..
1. form 요청값 전달
	1) 단일 데이터 전송
		data:"요청키="+$("[name=속성]").val()
	2) 다중 데이터 전송
		data:{요청키:요청값,요청키2:요청값2,..}
	3) form 데이터 전송
		data:$("form").serialize()
2. json데이터를 특정한 리스트에 할당 처리..
	1) controller단에서 모델 데이터 설정.
	2) success:function(data){
		 var list = data.모델명
		 var addHtml = "";
		 $(list).each(function(idx, obj){
		 	addHtml+="<tr>"
		 	addHtml+="<td>"+obj.속성1+"</td>"
		 	addHtml+="<td>"+obj.속성2+"</td>"
		 	addHtml+="<td>"+obj.속성3+"</td>"
		 	addHtml+="</tr>"
		 	
		 })
	}
3. backend 데이터 만들기.(요청/json데이터 만들기)
			
// ex1) 사원번호 입력시, 등록 여부를 ajax로 처리..
처리 순서
1. backend 구현
	1) sql : emp
		SELECT count(*)
		FROM emp
		WHERE empno=#{empno}		
		
	2) vo(x)
	3) dao
		checkEmpno()
		
	
	
	4) service
		AjaxService
			String 리턴  
				등록된 사원번호가 있음
				해당사원번호로 등록 가능
	----------------------	
	5) controller
		AjaxController
			url/메서드명 ajaxckempno
			요청값 처리..
			ResponseEntity<String> 처리..
				
		
		
		

2. front 구현
	1) 화면 form
	2) js 이벤트 ajax
	


// ex2) 사원명입력을 통해서, keyword검색으로 바로 ajax로 관련 list 출력 처리..
// ex3) 부서번호 입력/선택시, 해당 부서번호에 관련된 상세정보 출력


# 조별로 확인해주세요..
1. 혼자할 수 있는 인원(@@명)
2. front단 구현이 어렵다.(@@명)
3. back단 구현이 어렵다(@@명)
4. 전체적으로 어디서 부터 무엇을 해야할지 순서를 모르겠다(@@명)
	1) 순서만 알면 할 수 있다(@@명)
	2) 순서를 알아도 핵심 코드를 알아야 된다(@@명)
	-----------------------------
	3) 순서알고 핵심코드를 알아고 에러가 나면 멘붕(@@명)
	
	
	

 













