### Vue 이벤트 수업 시작 시 진행 내용

---

#### 1. 흥미로운 도입
- **퀴즈**: 간단한 인터랙티브 웹 페이지를 보여주며, 특정 버튼을 눌렀을 때 발생하는 이벤트에 
	대해 질문을 던집니다.
 	예를 들어, 버튼을 누를 때마다 색상이 변하는 페이지를 보여주며 "이것이 어떻게 가능한지 
 	아는 사람 있나요?"라고 묻습니다.
- **데모**: 실제 웹사이트나 어플리케이션에서 자주 사용되는 이벤트 예시를 보여줍니다. 
예: "트위터의 좋아요 버튼을 누르면 발생하는 애니메이션 효과"

---

#### 2. 학습목표
- **이해**: Vue.js에서 이벤트를 이해하고 사용할 수 있습니다.
- **적용**: 다양한 유형의 이벤트를 처리하여 인터랙티브한 웹 페이지를 개발할 수 있습니다.
- **분석**: 이벤트 핸들러의 동작 방식을 분석하고 최적화할 수 있습니다.

---

#### 3. 주요 핵심 키워드와 핵심 개념
- **이벤트(event)**: 사용자와 웹 페이지 간의 상호작용을 의미.
- **이벤트 핸들러(event handler)**: 이벤트가 발생했을 때 실행되는 함수.
- **@ 이벤트 디렉티브**: Vue에서 이벤트를 처리하기 위해 사용하는 디렉티브.
- **$event 객체**: 이벤트와 관련된 정보를 담고 있는 객체.
- **메소드**: 이벤트 발생 시 호출될 함수를 정의하는 곳.

---

#### 4. 향상된 암기 기법에 의한 핵심 키워드와 핵심 개념 암기
- **스토리텔링 기법**: 사용자가 클릭, 마우스 오버, 키보드 입력 등의 이벤트를 발생시키는 
     상황을 스토리로 구성하여 설명합니다.
  - 예시: "사용자가 검색창에 텍스트를 입력하고 엔터를 누르면 @keypress.enter가 
     발동하여 검색 함수가 호출됩니다."
- **비유 기법**: 이벤트 핸들러를 오케스트라 지휘자에 비유하여 설명합니다.
  - 예시: "마치 오케스트라 지휘자가 특정 신호를 주면 연주자들이 연주를 시작하는 것처럼, 이벤트 핸들러가 신호를 받으면 함수를 실행합니다."

---

#### 5. 실무적용사례
- **프로젝트 소개**: 간단한 투두 리스트 어플리케이션을 통해 각종 이벤트를 처리하는 사례를 설명합니다.
  - **추가 버튼 클릭**: 새로운 할 일을 추가하는 이벤트.
  - **삭제 버튼 클릭**: 할 일을 삭제하는 이벤트.
  - **체크박스 클릭**: 할 일 완료 상태를 토글하는 이벤트.
- **코드 리뷰**: 실제 코드 샘플을 보여주며, 각 이벤트와 관련된 코드 블록을 설명합니다.
  - **예시 코드**:
    ```javascript
    <template>
      <div>
        <input v-model="newTodo" @keyup.enter="addTodo">
        모델 데이터 연결 및 키를 입력하고 enter를 눌렀을 때, 처리할 함수 호출(addTodo)
        <button @click="addTodo">추가</button>
        <ul>
          <li v-for="(todo, index) in todos" :key="index">
            {{ todo.text }}
            <button @click="removeTodo(index)">삭제</button>
          </li>
        </ul>
      </div>
    </template>
    
    <script>
    export default {
      data() {
        return {
          newTodo: '',
          todos: []
        }
      },
      methods: {
        addTodo() {
          if (this.newTodo !== '') {
            this.todos.push({ text: this.newTodo });
            this.newTodo = '';
          }
        },
        removeTodo(index) {
          this.todos.splice(index, 1);
          배열.splice(지정위치로부터, 갯수)
        }
      }
    }
    </script>
    ```
- **실습 과제**: 학생들이 직접 간단한 이벤트를 처리하는 웹 페이지를 만들어 보도록 합니다. 
예를 들어, "버튼을 클릭할 때마다 카운트가 증가하는 기능을 구현해 보세요."


# 오전 프로젝트 진행 계획 작성(개인별로 작성해서, 조원들과 검토 후 전달)
1. 오늘 진행할 일정계획
2. 전날 계획 대비 진행율
3. 개념적 이해나 도움이 필요한 부분






