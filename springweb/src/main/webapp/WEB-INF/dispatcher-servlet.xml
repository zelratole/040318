<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:task="http://www.springframework.org/schema/task" 
   xmlns:aop="http://www.springframework.org/schema/aop" 
   xmlns:context="http://www.springframework.org/schema/context"
   xmlns:mvc="http://www.springframework.org/schema/mvc"
   xmlns:p="http://www.springframework.org/schema/p"
   xmlns:c="http://www.springframework.org/schema/c"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:util="http://www.springframework.org/schema/util"
   xmlns:websocket="http://www.springframework.org/schema/websocket"
   xmlns:sec="http://www.springframework.org/schema/security"
   xmlns:tx="http://www.springframework.org/schema/tx" 
    
   xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/task
       http://www.springframework.org/schema/task/spring-task.xsd       
        http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc
      http://www.springframework.org/schema/mvc/spring-mvc.xsd     
        http://www.springframework.org/schema/util
       http://www.springframework.org/schema/util/spring-util.xsd
         http://www.springframework.org/schema/websocket
      http://www.springframework.org/schema/websocket/spring-websocket.xsd
       http://www.springframework.org/schema/security
       http://www.springframework.org/schema/security/spring-security.xsd   
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd   
      ">
      <context:component-scan base-package="springweb">
         <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
         <context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>
         <context:include-filter type="annotation" expression="org.springframework.stereotype.Repository"/>
      </context:component-scan>
 
      <!-- # 웹소켓 통신을 위한 선언 
      1. java로 핸들러 클라스가 가능하게 mapper/adapter 선언
       -->
      
         <!-- <mvc:default-servlet-handler/>
         2. java핸들러 클래스 선언 및 client에서 호출 url 지정..
         <websocket:handlers>
         <websocket:mapping handler="chatHandler"
            path="/chat-ws.do"/>
      </websocket:handlers>      
          -->

      
  	  <context:property-placeholder location="classpath:resource/config"/>
    
      <!-- container안에서도 접근, java소스로도 접근 가능.. key/val -->
      
     
     <!-- 
      # DB연결
      1. DBCP(Database Connection Pool)을 이용해서 DB연결 처리 ..  
         destroy-method="close" 종료시 bean객체에서 사용하는
         메서드 정의  
       -->
       <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
       destroy-method="close">     
       <property name="driverClassName"
             value="oracle.jdbc.driver.OracleDriver"/>
          <property name="url" value="jdbc:oracle:thin:@localhost:1521:xe"/>
          <property name="username" value="scott"/>        
          <property name="password" value="tiger"/>        
       </bean>
     <!-- 
     # mybatis 연동처리...
     1. 위 연결 정보 설정
     2. mybatis 공통 xml 연동 처리
     3. mybatis를 통해 만들어질 실제 객체가 바라보는
        dao interface위치설정    
        1) 여러 패키지에 있는 dao를 호출하려면 아래와같이 설정한다.
            value="패키지1명; 패키지2명" 
      -->
     <bean id="sqlSessionFactory" 
     class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
      <property name="configLocation" value="classpath:resource/mybatis_config.xml"/>

     </bean>
     <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
      <property name="basePackage" value="springweb.a03_mvc.a03_dao, springweb.a04_mvc.a03_dao" />
   </bean>
   <!-- 
   # jsp뷰가 default인데, 이 뷰뿐만 아니라 선언된 뷰를 사용할려면 
   두가지 뷰가 특정 규칙에 의해서 우선 순위가 설정이 되어야 한다.
   1. 우선 jsp뷰를 제외한 bean으로 선언할 뷰 
   2. 두번째 우선순위로 jsp 뷰 선언..
    -->

    
    
    
    
    <!-- 추가되는 뷰가 적기 때문에 우선순위를 지정. 
       return "파일업로드 view" ==> container에서 명식적으로 선언하여 
          처리하는 뷰 
    -->
    <!-- 파일업로드 뷰 추가... 
    컨트롤러에 요청값으로 MultiPartFile이 파일업로드 객체로 사용할 수 있게 해준다. -->
    <bean id="multipartResolver"
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    </bean>
    <bean id="btnViewResolver"
       class ="org.springframework.web.servlet.view.BeanNameViewResolver">
       <property name="order" value="0"></property>   
    </bean>    
    <!-- json 뷰 추가 -->
    <bean id="jsonView"
       class="org.springframework.web.servlet.view.json.MappingJackson2JsonView">
       <property name="contentType" value="text/html;charset=utf-8"/>       
    </bean> 

 
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
       <property name="order" value="1"></property>
    </bean>
    <!--그 외는 화면을 처리하는 viewer(jsp)로 우선순위를 뒤로 지정
    return"WEB-INF\\views\\a05_mvcexp\\a02_memberList.jsp";
     -->
     <!-- 
     1. 다국어 코드 등록을 위한 설정 위치 지정     
      -->
      <bean id="messageSource" 
            class="org.springframework.context.support.ResourceBundleMessageSource">
               <property name="basenames">
               <list>
                  <value>message.msg</value>
                  <!-- 패키지명 기준으로 message패키지의 msg파일 설정 -->
               </list>
               </property>
      </bean>
     <!-- 
     2. 언어 변환 처리를 위한 객체 등록
      -->
     <bean id="localeResolver" 
        class="org.springframework.web.servlet.i18n.SessionLocaleResolver"></bean>
     <!-- 
     # 메일 발송 서버접속 객체 선언 -->
     
     <bean id="mailSender" class=
   "org.springframework.mail.javamail.JavaMailSenderImpl">
   		<property name="host" value="smtp.gmail.com"/>
   		<!-- 이메일을 전송할 SMTP 서버의 호스트 이름을 지정. 여기서는 Gmail의 SMTP서버 설정 -->
   		<property name="port" value="587"/>
   		<!-- SMTP서버와 통신할 포트 번호를 지정, 포트 587은 TLS(Transport Layer Security)를
   		사용한 SMTP 전송에 일반적으로 사용 
   		mailaccount=ssangyoung5555@gmail.com
   		mailpwd=vytxyzxlmyldjkst
   		-->
   		<property name="username" value="${mailaccount}"/>
   		<property name="password" value="${mailpwd}"/>
   		<property name="javaMailProperties">
   		<!-- 추가적으로 JavaMail 속성을 설정하기 위한 속성값 지정 -->
   			<props>
   				<prop key="mail.smtp.starttls.enable">true</prop>
   				<!-- TLS를 사용하여 이메일 전송을 보안하는 것을 활성화한다. TLS는 데이터를 암호화하여
   				전송 중에 보호 -->
   				<prop key="mail.smtp.auth">true</prop>
   				<!-- SMTP 서버에 대한 인증을 요구하는지 여부를 지정. 여기서는 인증이 필요하게끔 처리. -->
   				<prop key="mail.transport.protocol">smtp</prop>
   				<!-- 이메일 전송에 사용할 프로토콜(전송규약-좀더 쉬운말로 패킷전송언어) 지정.
   					SMTP라는 패킷전송 언어를 사용하겠다고 선언 -->
   				<prop key="mail.debug">true</prop>
   				<!-- 디버그 모드를 활성화하여 메일 전송 과정의 상세 로그를 출력. 개발 중에 문제 해결에 유용 -->
   				<prop key="mail.smtp.ssl.true">smtp.gmail.com</prop>
   				<!-- SSL설정 관련 속성.. -->
   				<prop key="mail.smtp.ssl.protocols">TLSv1.2</prop>
   				<!-- SSL/TLS 연결에 사용할 프로토콜를 지정. TLS 1.2를 사용하여 보안을 강화 
   				-->
   				
   			</props>
   		</property>	
   	
     </bean> 
    
</beans>      